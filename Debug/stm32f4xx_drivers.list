
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d38  08002d38  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002d38  08002d38  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d38  08002d38  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          0000011c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000248a  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000093a  00000000  00000000  00022538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  00022e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000208  00000000  00000000  000230d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000039a1  00000000  00000000  000232e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f40  00000000  00000000  00026c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bb8e  00000000  00000000  00029bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003574f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014a0  00000000  00000000  000357a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002b64 	.word	0x08002b64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002b64 	.word	0x08002b64

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <main>:
    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter

}

int main(void) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0

 	initialise_monitor_handles();
 80002a6:	f002 fbdb 	bl	8002a60 <initialise_monitor_handles>

	RTC_time_t currentTime;
	RTC_date_t currentDate;
	printf("RTC Test\n");
 80002aa:	4846      	ldr	r0, [pc, #280]	; (80003c4 <main+0x124>)
 80002ac:	f001 fa1e 	bl	80016ec <puts>

	// don't put the below here.

	// Check the validity of the data.

	I2C_PeriClockControl(I2C1, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	4845      	ldr	r0, [pc, #276]	; (80003c8 <main+0x128>)
 80002b4:	f000 fbac 	bl	8000a10 <I2C_PeriClockControl>
	GPIO_ButtonInit();
 80002b8:	f000 f944 	bl	8000544 <GPIO_ButtonInit>
//	while( ! GPIO_ReadFromInputPin( GPIOA,GPIO_PIN_0) );
/********************START****************/
	DS3231_init();
 80002bc:	f000 f9ce 	bl	800065c <DS3231_init>
	I2C_PeripheralControl(I2C2, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4842      	ldr	r0, [pc, #264]	; (80003cc <main+0x12c>)
 80002c4:	f000 fbfc 	bl	8000ac0 <I2C_PeripheralControl>

	uint8_t value = (uint8_t)(~(1 << 7)); // makes rue the bit is set to 0.
 80002c8:	237f      	movs	r3, #127	; 0x7f
 80002ca:	74fb      	strb	r3, [r7, #19]
	DS3231_Write(value, DS3231_ADDR_SR); // status register (SR), clears the OSF flag.
 80002cc:	7cfb      	ldrb	r3, [r7, #19]
 80002ce:	210f      	movs	r1, #15
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fb63 	bl	800099c <DS3231_Write>
	value = (uint8_t)(~(1 << 3));			// clears the 32Khz enable bit
 80002d6:	23f7      	movs	r3, #247	; 0xf7
 80002d8:	74fb      	strb	r3, [r7, #19]
	DS3231_Write(value, DS3231_ADDR_SR);
 80002da:	7cfb      	ldrb	r3, [r7, #19]
 80002dc:	210f      	movs	r1, #15
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fb5c 	bl	800099c <DS3231_Write>

	uint8_t temp = DS3231_Read(0x0E);
 80002e4:	200e      	movs	r0, #14
 80002e6:	f000 fb75 	bl	80009d4 <DS3231_Read>
 80002ea:	4603      	mov	r3, r0
 80002ec:	74bb      	strb	r3, [r7, #18]
	printf("0x%x\n", temp);
 80002ee:	7cbb      	ldrb	r3, [r7, #18]
 80002f0:	4619      	mov	r1, r3
 80002f2:	4837      	ldr	r0, [pc, #220]	; (80003d0 <main+0x130>)
 80002f4:	f001 f974 	bl	80015e0 <iprintf>
	temp = DS3231_Read(0x0F);
 80002f8:	200f      	movs	r0, #15
 80002fa:	f000 fb6b 	bl	80009d4 <DS3231_Read>
 80002fe:	4603      	mov	r3, r0
 8000300:	74bb      	strb	r3, [r7, #18]
	printf("0x%x\n", temp);
 8000302:	7cbb      	ldrb	r3, [r7, #18]
 8000304:	4619      	mov	r1, r3
 8000306:	4832      	ldr	r0, [pc, #200]	; (80003d0 <main+0x130>)
 8000308:	f001 f96a 	bl	80015e0 <iprintf>


	currentDate.day = FRIDAY;
 800030c:	2306      	movs	r3, #6
 800030e:	71fb      	strb	r3, [r7, #7]
	currentDate.date = 15;
 8000310:	230f      	movs	r3, #15
 8000312:	713b      	strb	r3, [r7, #4]
	currentDate.month = 1;
 8000314:	2301      	movs	r3, #1
 8000316:	717b      	strb	r3, [r7, #5]
	// year is only last two digits, can't do 2022, etc.
	currentDate.year = 21;
 8000318:	2315      	movs	r3, #21
 800031a:	71bb      	strb	r3, [r7, #6]

	currentTime.hours = 4;
 800031c:	2304      	movs	r3, #4
 800031e:	72bb      	strb	r3, [r7, #10]
	currentTime.minutes = 25;
 8000320:	2319      	movs	r3, #25
 8000322:	727b      	strb	r3, [r7, #9]
	currentTime.seconds = 41;
 8000324:	2329      	movs	r3, #41	; 0x29
 8000326:	723b      	strb	r3, [r7, #8]
	currentTime.time_format = TIME_FORMAT_12HRS_PM;
 8000328:	2301      	movs	r3, #1
 800032a:	72fb      	strb	r3, [r7, #11]

	DS3231_Set_Current_Date(&currentDate);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fa76 	bl	8000820 <DS3231_Set_Current_Date>
	DS3231_Set_Current_Time(&currentTime);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f9e7 	bl	800070c <DS3231_Set_Current_Time>
	// I think the error happens up above?

	DS3231_Get_Current_Date(&currentDate);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fa9d 	bl	8000880 <DS3231_Get_Current_Date>
	DS3231_Get_Current_Time(&currentTime);
 8000346:	f107 0308 	add.w	r3, r7, #8
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fa23 	bl	8000796 <DS3231_Get_Current_Time>

	// print time based on time format;
	char *am_pm;
	if (currentTime.time_format != TIME_FORMAT_24HRS) {
 8000350:	7afb      	ldrb	r3, [r7, #11]
 8000352:	2b02      	cmp	r3, #2
 8000354:	d012      	beq.n	800037c <main+0xdc>
		//print with am/pm details. 0 == "AM", 1 == "PM"
		am_pm = ((currentTime.time_format == 1) ? "PM" : "AM");
 8000356:	7afb      	ldrb	r3, [r7, #11]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d101      	bne.n	8000360 <main+0xc0>
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0x134>)
 800035e:	e000      	b.n	8000362 <main+0xc2>
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <main+0x138>)
 8000362:	60fb      	str	r3, [r7, #12]

		printf("Current Time = %s %s\n", time_to_string(&currentTime), am_pm); // 4:25:41 PM
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f85d 	bl	8000428 <time_to_string>
 800036e:	4603      	mov	r3, r0
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	4619      	mov	r1, r3
 8000374:	4819      	ldr	r0, [pc, #100]	; (80003dc <main+0x13c>)
 8000376:	f001 f933 	bl	80015e0 <iprintf>
 800037a:	e009      	b.n	8000390 <main+0xf0>

	}
	else {
		// AM/PM not needed.
		printf("Current Time = %s\n", time_to_string(&currentTime)); // 4:25:41
 800037c:	f107 0308 	add.w	r3, r7, #8
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f851 	bl	8000428 <time_to_string>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4815      	ldr	r0, [pc, #84]	; (80003e0 <main+0x140>)
 800038c:	f001 f928 	bl	80015e0 <iprintf>
	}

	// 15/01/21 <friday

	printf("Current Date = %s <%s>\n", date_to_string(&currentDate), get_day_of_week(currentDate.day));
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f8ac 	bl	80004f0 <date_to_string>
 8000398:	4604      	mov	r4, r0
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f825 	bl	80003ec <get_day_of_week>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	4621      	mov	r1, r4
 80003a8:	480e      	ldr	r0, [pc, #56]	; (80003e4 <main+0x144>)
 80003aa:	f001 f919 	bl	80015e0 <iprintf>



	// busy loop
	while(1) {
		for (uint32_t i = 0; i < 250000; i++) {
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e002      	b.n	80003ba <main+0x11a>
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	3301      	adds	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <main+0x148>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d9f8      	bls.n	80003b4 <main+0x114>
 80003c2:	e7f4      	b.n	80003ae <main+0x10e>
 80003c4:	08002bc0 	.word	0x08002bc0
 80003c8:	40005400 	.word	0x40005400
 80003cc:	40005800 	.word	0x40005800
 80003d0:	08002bcc 	.word	0x08002bcc
 80003d4:	08002bd4 	.word	0x08002bd4
 80003d8:	08002bd8 	.word	0x08002bd8
 80003dc:	08002bdc 	.word	0x08002bdc
 80003e0:	08002bf4 	.word	0x08002bf4
 80003e4:	08002c08 	.word	0x08002c08
 80003e8:	0003d08f 	.word	0x0003d08f

080003ec <get_day_of_week>:

/*
 * helper function
 */

char* get_day_of_week(uint8_t day) {
 80003ec:	b4b0      	push	{r4, r5, r7}
 80003ee:	b08b      	sub	sp, #44	; 0x2c
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]


	char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <get_day_of_week+0x38>)
 80003f8:	f107 0408 	add.w	r4, r7, #8
 80003fc:	461d      	mov	r5, r3
 80003fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000402:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// day of the week macros start at 1 == "SUNDAY".
	return days[day - 1];
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3b01      	subs	r3, #1
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	3328      	adds	r3, #40	; 0x28
 8000412:	443b      	add	r3, r7
 8000414:	f853 3c20 	ldr.w	r3, [r3, #-32]

}
 8000418:	4618      	mov	r0, r3
 800041a:	372c      	adds	r7, #44	; 0x2c
 800041c:	46bd      	mov	sp, r7
 800041e:	bcb0      	pop	{r4, r5, r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	08002c20 	.word	0x08002c20

08000428 <time_to_string>:


// HH:MM:SS
char* time_to_string(RTC_time_t *rtc_time) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]

	static char buf[9]; // static to avoid dangling pointer
	buf[2] = ':';
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <time_to_string+0x48>)
 8000432:	223a      	movs	r2, #58	; 0x3a
 8000434:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <time_to_string+0x48>)
 8000438:	223a      	movs	r2, #58	; 0x3a
 800043a:	715a      	strb	r2, [r3, #5]
	number_to_string(rtc_time->hours, &buf[0]);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	789b      	ldrb	r3, [r3, #2]
 8000440:	490b      	ldr	r1, [pc, #44]	; (8000470 <time_to_string+0x48>)
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f81a 	bl	800047c <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	785b      	ldrb	r3, [r3, #1]
 800044c:	4909      	ldr	r1, [pc, #36]	; (8000474 <time_to_string+0x4c>)
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f814 	bl	800047c <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4907      	ldr	r1, [pc, #28]	; (8000478 <time_to_string+0x50>)
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f80e 	bl	800047c <number_to_string>

	buf[8] = '\0';
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <time_to_string+0x48>)
 8000462:	2200      	movs	r2, #0
 8000464:	721a      	strb	r2, [r3, #8]

	return buf;
 8000466:	4b02      	ldr	r3, [pc, #8]	; (8000470 <time_to_string+0x48>)

}
 8000468:	4618      	mov	r0, r3
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000a0 	.word	0x200000a0
 8000474:	200000a3 	.word	0x200000a3
 8000478:	200000a6 	.word	0x200000a6

0800047c <number_to_string>:

void number_to_string(uint8_t num , char* buf)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	6039      	str	r1, [r7, #0]
 8000486:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b09      	cmp	r3, #9
 800048c:	d809      	bhi.n	80004a2 <number_to_string+0x26>
		buf[0] = '0';
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2230      	movs	r2, #48	; 0x30
 8000492:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	79fa      	ldrb	r2, [r7, #7]
 800049a:	3230      	adds	r2, #48	; 0x30
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80004a0:	e01f      	b.n	80004e2 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b09      	cmp	r3, #9
 80004a6:	d91c      	bls.n	80004e2 <number_to_string+0x66>
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b62      	cmp	r3, #98	; 0x62
 80004ac:	d819      	bhi.n	80004e2 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <number_to_string+0x70>)
 80004b2:	fba2 2303 	umull	r2, r3, r2, r3
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	3330      	adds	r3, #48	; 0x30
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 80004c2:	79fa      	ldrb	r2, [r7, #7]
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <number_to_string+0x70>)
 80004c6:	fba3 1302 	umull	r1, r3, r3, r2
 80004ca:	08d9      	lsrs	r1, r3, #3
 80004cc:	460b      	mov	r3, r1
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	440b      	add	r3, r1
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	3230      	adds	r2, #48	; 0x30
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	701a      	strb	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	cccccccd 	.word	0xcccccccd

080004f0 <date_to_string>:

char* date_to_string(RTC_date_t *rtc_date)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <date_to_string+0x48>)
 80004fa:	222f      	movs	r2, #47	; 0x2f
 80004fc:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <date_to_string+0x48>)
 8000500:	222f      	movs	r2, #47	; 0x2f
 8000502:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	490b      	ldr	r1, [pc, #44]	; (8000538 <date_to_string+0x48>)
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ffb6 	bl	800047c <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	4909      	ldr	r1, [pc, #36]	; (800053c <date_to_string+0x4c>)
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ffb0 	bl	800047c <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	4907      	ldr	r1, [pc, #28]	; (8000540 <date_to_string+0x50>)
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ffaa 	bl	800047c <number_to_string>

	buf[8]= '\0';
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <date_to_string+0x48>)
 800052a:	2200      	movs	r2, #0
 800052c:	721a      	strb	r2, [r3, #8]

	return buf;
 800052e:	4b02      	ldr	r3, [pc, #8]	; (8000538 <date_to_string+0x48>)
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000af 	.word	0x200000af
 8000540:	200000b2 	.word	0x200000b2

08000544 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <GPIO_ButtonInit+0x2c>)
 800054c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800054e:	2300      	movs	r3, #0
 8000550:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000552:	2300      	movs	r3, #0
 8000554:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000556:	2302      	movs	r3, #2
 8000558:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800055a:	2300      	movs	r3, #0
 800055c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fd1d 	bl	8000fa0 <GPIO_Init>

}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40020000 	.word	0x40020000

08000574 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	DS3231_Get_Current_Time(&current_time);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f909 	bl	8000796 <DS3231_Get_Current_Time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000584:	7afb      	ldrb	r3, [r7, #11]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d012      	beq.n	80005b0 <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SysTick_Handler+0x20>
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <SysTick_Handler+0x80>)
 8000592:	e000      	b.n	8000596 <SysTick_Handler+0x22>
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <SysTick_Handler+0x84>)
 8000596:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff43 	bl	8000428 <time_to_string>
 80005a2:	4603      	mov	r3, r0
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4814      	ldr	r0, [pc, #80]	; (80005fc <SysTick_Handler+0x88>)
 80005aa:	f001 f819 	bl	80015e0 <iprintf>
 80005ae:	e009      	b.n	80005c4 <SysTick_Handler+0x50>
		lcd_print_string(am_pm);
#endif

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff37 	bl	8000428 <time_to_string>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4619      	mov	r1, r3
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <SysTick_Handler+0x8c>)
 80005c0:	f001 f80e 	bl	80015e0 <iprintf>
		lcd_set_cursor(1, 1);
		lcd_print_string(time_to_string(&current_time));
#endif
	}

	DS3231_Get_Current_Date(&current_date);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f95a 	bl	8000880 <DS3231_Get_Current_Date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff8e 	bl	80004f0 <date_to_string>
 80005d4:	4604      	mov	r4, r0
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff07 	bl	80003ec <get_day_of_week>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4621      	mov	r1, r4
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <SysTick_Handler+0x90>)
 80005e6:	f000 fffb 	bl	80015e0 <iprintf>
	lcd_print_char('<');
	lcd_print_string(get_day_of_week(current_date.day));
	lcd_print_char('>');
#endif

}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08002bd4 	.word	0x08002bd4
 80005f8:	08002bd8 	.word	0x08002bd8
 80005fc:	08002c40 	.word	0x08002c40
 8000600:	08002c58 	.word	0x08002c58
 8000604:	08002c6c 	.word	0x08002c6c

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 ffa7 	bl	8001588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fe31 	bl	80002a0 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800064c:	08002d40 	.word	0x08002d40
  ldr r2, =_sbss
 8000650:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000654:	200001a0 	.word	0x200001a0

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <DS3231_init>:
 *
 *	@return		- none
 *
 *	@note		- Changes to initialzation should be made in DS3231 .h file.
 */
void DS3231_init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0



	//1.) Initialize the i2c pins
	DS3231_I2C_Pin_Config();
 8000660:	f000 f942 	bl	80008e8 <DS3231_I2C_Pin_Config>

	// 2.) initialize the i2c peripheral
	DS3231_I2C_Config();
 8000664:	f000 f97e 	bl	8000964 <DS3231_I2C_Config>

	// 3.) Enable the I2C Peripheral
	I2C_PeripheralControl((I2Cx_Registers_t*)DS3231_I2C, ENABLE);
 8000668:	2101      	movs	r1, #1
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <DS3231_init+0x20>)
 800066c:	f000 fa28 	bl	8000ac0 <I2C_PeripheralControl>

	// DS3231 oscillator is always when powered by Vcc power.
	DS3231_Write(0x00, DS3231_ADDR_SEC);
 8000670:	2100      	movs	r1, #0
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f992 	bl	800099c <DS3231_Write>

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40005800 	.word	0x40005800

08000680 <binary_to_bcd>:
 *
 *	@note		- Register map in DS3231 Manual, Pg. 11
 */

static uint8_t binary_to_bcd(uint8_t value)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b09      	cmp	r3, #9
 8000692:	d918      	bls.n	80006c6 <binary_to_bcd+0x46>
	{
		m = value /10;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <binary_to_bcd+0x54>)
 8000698:	fba2 2303 	umull	r2, r3, r2, r3
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <binary_to_bcd+0x54>)
 80006a4:	fba3 1302 	umull	r1, r3, r3, r2
 80006a8:	08d9      	lsrs	r1, r3, #3
 80006aa:	460b      	mov	r3, r1
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	cccccccd 	.word	0xcccccccd

080006d8 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	091b      	lsrs	r3, r3, #4
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 80006fa:	7bfa      	ldrb	r2, [r7, #15]
 80006fc:	7bbb      	ldrb	r3, [r7, #14]
 80006fe:	4413      	add	r3, r2
 8000700:	b2db      	uxtb	r3, r3
}
 8000702:	4618      	mov	r0, r3
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <DS3231_Set_Current_Time>:


void DS3231_Set_Current_Time(RTC_time_t *rtc_time) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ffb1 	bl	8000680 <binary_to_bcd>
 800071e:	4603      	mov	r3, r0
 8000720:	73bb      	strb	r3, [r7, #14]

	//seconds &= ~( 1 << 7);

	DS3231_Write(seconds, DS3231_ADDR_SEC);
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f938 	bl	800099c <DS3231_Write>

	DS3231_Write(binary_to_bcd(rtc_time->minutes), DS3231_ADDR_MIN);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffa5 	bl	8000680 <binary_to_bcd>
 8000736:	4603      	mov	r3, r0
 8000738:	2101      	movs	r1, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f92e 	bl	800099c <DS3231_Write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff9b 	bl	8000680 <binary_to_bcd>
 800074a:	4603      	mov	r3, r0
 800074c:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d104      	bne.n	8000760 <DS3231_Set_Current_Time+0x54>
		hrs &= ~(1 << 6);
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e011      	b.n	8000784 <DS3231_Set_Current_Time+0x78>
	}else{
		hrs |= (1 << 6);
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000766:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	78db      	ldrb	r3, [r3, #3]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <DS3231_Set_Current_Time+0x6e>
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f043 0320 	orr.w	r3, r3, #32
 8000776:	b2db      	uxtb	r3, r3
 8000778:	e003      	b.n	8000782 <DS3231_Set_Current_Time+0x76>
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f023 0320 	bic.w	r3, r3, #32
 8000780:	b2db      	uxtb	r3, r3
 8000782:	73fb      	strb	r3, [r7, #15]
	}

	DS3231_Write(hrs,DS3231_ADDR_HRS);
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f907 	bl	800099c <DS3231_Write>

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <DS3231_Get_Current_Time>:
 *
 *	@return		- none
 *
 *	@note		- Register map in DS3231 Manual, Pg. 11
 */
void DS3231_Get_Current_Time(RTC_time_t *rtc_time) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
//
//	rtc_time->hours = bcd_to_binary(hrs);

	uint8_t seconds,hrs;

	seconds = DS3231_Read(DS3231_ADDR_SEC);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f918 	bl	80009d4 <DS3231_Read>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73bb      	strb	r3, [r7, #14]

	//seconds &= ~( 1 << 7); not needed

	rtc_time->seconds = bcd_to_binary(seconds);
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff94 	bl	80006d8 <bcd_to_binary>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(DS3231_Read(DS3231_ADDR_MIN));
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 f90b 	bl	80009d4 <DS3231_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff89 	bl	80006d8 <bcd_to_binary>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	705a      	strb	r2, [r3, #1]

	hrs = DS3231_Read(DS3231_ADDR_HRS);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 f900 	bl	80009d4 <DS3231_Read>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00f      	beq.n	8000802 <DS3231_Get_Current_Time+0x6c>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e002      	b.n	8000808 <DS3231_Get_Current_Time+0x72>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2202      	movs	r2, #2
 8000806:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff64 	bl	80006d8 <bcd_to_binary>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	709a      	strb	r2, [r3, #2]

}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <DS3231_Set_Current_Date>:

void DS3231_Set_Current_Date(RTC_date_t *rtc_date) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]


	DS3231_Write(binary_to_bcd(rtc_date->day), DS3231_ADDR_DAY);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	78db      	ldrb	r3, [r3, #3]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff27 	bl	8000680 <binary_to_bcd>
 8000832:	4603      	mov	r3, r0
 8000834:	2103      	movs	r1, #3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f8b0 	bl	800099c <DS3231_Write>
	DS3231_Write(binary_to_bcd(rtc_date->date), DS3231_ADDR_DATE);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff1d 	bl	8000680 <binary_to_bcd>
 8000846:	4603      	mov	r3, r0
 8000848:	2104      	movs	r1, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f8a6 	bl	800099c <DS3231_Write>
	DS3231_Write(binary_to_bcd(rtc_date->month), DS3231_ADDR_MONTH);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff13 	bl	8000680 <binary_to_bcd>
 800085a:	4603      	mov	r3, r0
 800085c:	2105      	movs	r1, #5
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f89c 	bl	800099c <DS3231_Write>
	DS3231_Write(binary_to_bcd(rtc_date->year), DS3231_ADDR_YEAR);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff09 	bl	8000680 <binary_to_bcd>
 800086e:	4603      	mov	r3, r0
 8000870:	2106      	movs	r1, #6
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f892 	bl	800099c <DS3231_Write>

}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <DS3231_Get_Current_Date>:
void DS3231_Get_Current_Date(RTC_date_t *rtc_date) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	// (day) is the software defined WORD day (i.e. Monday, Tuesday, Wednesday, etc)
	rtc_date->day = bcd_to_binary(DS3231_Read(DS3231_ADDR_DAY));
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f8a3 	bl	80009d4 <DS3231_Read>
 800088e:	4603      	mov	r3, r0
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff21 	bl	80006d8 <bcd_to_binary>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	70da      	strb	r2, [r3, #3]
	// (date) is the NUMBER day of the month 1-31.
	rtc_date->date = bcd_to_binary(DS3231_Read(DS3231_ADDR_DATE));
 800089e:	2004      	movs	r0, #4
 80008a0:	f000 f898 	bl	80009d4 <DS3231_Read>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff16 	bl	80006d8 <bcd_to_binary>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(DS3231_Read(DS3231_ADDR_MONTH));
 80008b4:	2005      	movs	r0, #5
 80008b6:	f000 f88d 	bl	80009d4 <DS3231_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff0b 	bl	80006d8 <bcd_to_binary>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(DS3231_Read(DS3231_ADDR_YEAR));
 80008ca:	2006      	movs	r0, #6
 80008cc:	f000 f882 	bl	80009d4 <DS3231_Read>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff00 	bl	80006d8 <bcd_to_binary>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	709a      	strb	r2, [r3, #2]

}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <DS3231_I2C_Pin_Config>:

// Helper function, configures the i2c pins for it
static void DS3231_I2C_Pin_Config(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

	GPIO_Handle_t i2c_sda, i2c_scl;

	/* Set all member elements to 0 */
	memset(&i2c_sda, 0, sizeof(i2c_sda));
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	220c      	movs	r2, #12
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fe6a 	bl	80015d0 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 80008fc:	463b      	mov	r3, r7
 80008fe:	220c      	movs	r2, #12
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fe64 	bl	80015d0 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS3231_I2C_GPIO_PORT; // should be GPIOB
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <DS3231_I2C_Pin_Config+0x78>)
 800090a:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF4;
 800090c:	2304      	movs	r3, #4
 800090e:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000910:	2302      	movs	r3, #2
 8000912:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_OD;
 8000914:	2301      	movs	r3, #1
 8000916:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS3231_I2C_PUPD; 	// Should use internal pullup for our project
 8000918:	2301      	movs	r3, #1
 800091a:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS3231_I2C_SDA_PIN;		// should be PB7
 800091c:	230b      	movs	r3, #11
 800091e:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000920:	2302      	movs	r3, #2
 8000922:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);	// Also enables RCC for GPIO Port
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fb39 	bl	8000fa0 <GPIO_Init>


	i2c_scl.pGPIOx = DS3231_I2C_GPIO_PORT; // should be GPIOB
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <DS3231_I2C_Pin_Config+0x78>)
 8000930:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF4;
 8000932:	2304      	movs	r3, #4
 8000934:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000936:	2302      	movs	r3, #2
 8000938:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_TYPE_OD;
 800093a:	2301      	movs	r3, #1
 800093c:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS3231_I2C_PUPD; 	// Should use internal pullup for our project
 800093e:	2301      	movs	r3, #1
 8000940:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS3231_I2C_SCL_PIN;		// should be PB7
 8000942:	230a      	movs	r3, #10
 8000944:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000946:	2302      	movs	r3, #2
 8000948:	71bb      	strb	r3, [r7, #6]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS3231_I2C_SCL_PIN;		// should be PB6;
 800094a:	230a      	movs	r3, #10
 800094c:	713b      	strb	r3, [r7, #4]

	GPIO_Init(&i2c_scl);
 800094e:	463b      	mov	r3, r7
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fb25 	bl	8000fa0 <GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020400 	.word	0x40020400

08000964 <DS3231_I2C_Config>:
 *
 *	@param		- none
 *
 *	@return		- none
 */
static void DS3231_I2C_Config(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	g_DS3231_I2C_Handle.pI2Cx = I2C2;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <DS3231_I2C_Config+0x2c>)
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <DS3231_I2C_Config+0x30>)
 800096c:	601a      	str	r2, [r3, #0]
	g_DS3231_I2C_Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <DS3231_I2C_Config+0x2c>)
 8000970:	2201      	movs	r2, #1
 8000972:	725a      	strb	r2, [r3, #9]
	g_DS3231_I2C_Handle.I2C_Config.I2C_DeviceAddress = 0x61;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <DS3231_I2C_Config+0x2c>)
 8000976:	2261      	movs	r2, #97	; 0x61
 8000978:	721a      	strb	r2, [r3, #8]
	// below doesn't really matter what we choose, we aren't in fast mode (FM)
	g_DS3231_I2C_Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <DS3231_I2C_Config+0x2c>)
 800097c:	2200      	movs	r2, #0
 800097e:	729a      	strb	r2, [r3, #10]
	g_DS3231_I2C_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_ST;
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <DS3231_I2C_Config+0x2c>)
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <DS3231_I2C_Config+0x34>)
 8000984:	605a      	str	r2, [r3, #4]

	I2C_Init(&g_DS3231_I2C_Handle);
 8000986:	4802      	ldr	r0, [pc, #8]	; (8000990 <DS3231_I2C_Config+0x2c>)
 8000988:	f000 f8d0 	bl	8000b2c <I2C_Init>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000b8 	.word	0x200000b8
 8000994:	40005800 	.word	0x40005800
 8000998:	000186a0 	.word	0x000186a0

0800099c <DS3231_Write>:
 *	@param		- Address of register in DS3231 you want alter (read the Ref Manual for them)
 *
 *	@return		- none
 *	@note		- "Figure 3. Data Write--Slave Recieve Mode" in DS3231 RM pg. 16.
 */
void DS3231_Write(uint8_t value, uint8_t reg_addr) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71bb      	strb	r3, [r7, #6]

	uint8_t tx[2];
	tx[0] = reg_addr;
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_DS3231_I2C_Handle, tx, 2, DS3231_SLAVE_ADDR, 0);
 80009b4:	f107 010c 	add.w	r1, r7, #12
 80009b8:	2300      	movs	r3, #0
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2368      	movs	r3, #104	; 0x68
 80009be:	2202      	movs	r2, #2
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <DS3231_Write+0x34>)
 80009c2:	f000 f9f8 	bl	8000db6 <I2C_MasterSendData>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000b8 	.word	0x200000b8

080009d4 <DS3231_Read>:
 *	@return		- 8-bit data from reg_addr for DS3231
 *	@note		- "Figure 5. Data Write/Read -- Slave recieve then transmit" DS3231 RF pg. 17
 */


uint8_t DS3231_Read(uint8_t reg_addr) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]

	/*
	 * Question: Why don't we send over word again?
	 * on pg. 17 it says we don't need to if a write already occured.
	 */
	I2C_MasterSendData(&g_DS3231_I2C_Handle, &reg_addr, 1, DS3231_SLAVE_ADDR, 0);
 80009de:	1df9      	adds	r1, r7, #7
 80009e0:	2300      	movs	r3, #0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2368      	movs	r3, #104	; 0x68
 80009e6:	2201      	movs	r2, #1
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <DS3231_Read+0x38>)
 80009ea:	f000 f9e4 	bl	8000db6 <I2C_MasterSendData>
	// Now we just recieve a single byte.
	I2C_MasterReceiveData(&g_DS3231_I2C_Handle, &data, 1, DS3231_SLAVE_ADDR, 0);
 80009ee:	f107 010f 	add.w	r1, r7, #15
 80009f2:	2300      	movs	r3, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2368      	movs	r3, #104	; 0x68
 80009f8:	2201      	movs	r2, #1
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <DS3231_Read+0x38>)
 80009fc:	f000 fa3e 	bl	8000e7c <I2C_MasterReceiveData>
	return data;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000b8 	.word	0x200000b8

08000a10 <I2C_PeriClockControl>:
 * @return      - none
 *
 * @note        - I2Cx register reset macros in stm32f407xx.h 
 */

void I2C_PeriClockControl(I2Cx_Registers_t *pI2Cx, uint8_t ENorDI) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]

	if (ENorDI == ENABLE) {
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d120      	bne.n	8000a64 <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <I2C_PeriClockControl+0xa0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d106      	bne.n	8000a38 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}	
	}
}
 8000a36:	e035      	b.n	8000aa4 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <I2C_PeriClockControl+0xa8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d106      	bne.n	8000a4e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a4c:	e02a      	b.n	8000aa4 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <I2C_PeriClockControl+0xac>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d126      	bne.n	8000aa4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a62:	e01f      	b.n	8000aa4 <I2C_PeriClockControl+0x94>
		if (pI2Cx == I2C1) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <I2C_PeriClockControl+0xa0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d106      	bne.n	8000a7a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a78:	e014      	b.n	8000aa4 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2) {
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <I2C_PeriClockControl+0xa8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d106      	bne.n	8000a90 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a8e:	e009      	b.n	8000aa4 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <I2C_PeriClockControl+0xac>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d105      	bne.n	8000aa4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <I2C_PeriClockControl+0xa4>)
 8000a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	40005c00 	.word	0x40005c00

08000ac0 <I2C_PeripheralControl>:
 *
 * @return      - none
 *
 */

void I2C_PeripheralControl(I2Cx_Registers_t *pI2Cx, uint8_t ENorDIS) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]

    if (ENorDIS == ENABLE) {
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d106      	bne.n	8000ae0 <I2C_PeripheralControl+0x20>
        pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);   // enables the peripheral
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f043 0201 	orr.w	r2, r3, #1
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]
    }
    else {
        pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);  // enables the peripheral
    }

}
 8000ade:	e005      	b.n	8000aec <I2C_PeripheralControl+0x2c>
        pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);  // enables the peripheral
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 0201 	bic.w	r2, r3, #1
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <I2C_ACKControl>:
 * @param		- ENABLE or DISABLE macro
 *
 * @return      - none
 */

void I2C_ACKControl(I2Cx_Registers_t *pI2Cx, uint8_t ENorDIS) {
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	460b      	mov	r3, r1
 8000b00:	70fb      	strb	r3, [r7, #3]

	if (ENorDIS == I2C_ACK_ENABLE) {
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d106      	bne.n	8000b16 <I2C_ACKControl+0x20>
		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_ACK);   // enables automatic acking
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
	}
	else {
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_ACK);  // disables automatic acking
	}

}
 8000b14:	e005      	b.n	8000b22 <I2C_ACKControl+0x2c>
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_ACK);  // disables automatic acking
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <I2C_Init>:
 * @param		- ENABLE or DISABLE macro
 *
 * @return      - none
 */

void I2C_Init(I2C_Handle_t *pI2CHandle) { // we setup automatic ACKing, specified the device slave address, specified the frequency of the peripheral bus after prescalers, configure the clock speed that we want.
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

	/* Set automatic ACKing */
	uint32_t tempReg = 0x0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]

	/* Enable the peripheral clock */
	// @study: "why doens't this one trigger the SR2 busy flag?"
	// ^^^ I think it is because the pins need to be configured first before the clock can be set?
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff66 	bl	8000a10 <I2C_PeriClockControl>
	//@change: Below 1 line. perhaps I need to have peripheral enabled before I can set ACK control.
	I2C_PeripheralControl(I2C1, ENABLE);
 8000b44:	2101      	movs	r1, #1
 8000b46:	4854      	ldr	r0, [pc, #336]	; (8000c98 <I2C_Init+0x16c>)
 8000b48:	f7ff ffba 	bl	8000ac0 <I2C_PeripheralControl>
	//ack control bit IMPORTANT. We first need to enable the peripheral or else ACK will never be set.
	tempReg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7a5b      	ldrb	r3, [r3, #9]
 8000b50:	029b      	lsls	r3, r3, #10
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR1 |= tempReg;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]

	// tempReg = 0;

	/* configure the FREQ field of CR2. Frequency of our peripheral based on  */
	tempReg = RCC_GetPCLK1Value() / 1000000U;	//we just want the number in Mhz
 8000b6a:	f000 fcbd 	bl	80014e8 <RCC_GetPCLK1Value>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <I2C_Init+0x170>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	0c9b      	lsrs	r3, r3, #18
 8000b78:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR2 = (tempReg & 0x3F);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b84:	605a      	str	r2, [r3, #4]

	tempReg = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]

	//program the device own address. Helpful for when the device is acting as a slave device
	tempReg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1); // this is in the OAR1 register of I2C
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7a1b      	ldrb	r3, [r3, #8]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	461a      	mov	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
	tempReg |= (1 << 14);	// Data Manual says that 14th bit must be KEPT at 1 by via software
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 = tempReg;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	609a      	str	r2, [r3, #8]


	/* CCR Calculations produces different serial clock speeds */
	tempReg = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
	uint16_t CCR_Value = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	817b      	strh	r3, [r7, #10]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_ST) {//Standard Mode (SM)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <I2C_Init+0x174>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d80f      	bhi.n	8000bda <I2C_Init+0xae>

		//tempReg |= (0 << 15);	// 0 = SM mode, bit position 15
		//note: for standard mode T-High = T-Low = CCR * T-PCLK
		CCR_Value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed)); //@note: Formula for how this was derived is in video #191. Reference Duty Cycle also
 8000bba:	f000 fc95 	bl	80014e8 <RCC_GetPCLK1Value>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	817b      	strh	r3, [r7, #10]
		tempReg |= (CCR_Value & 0xFFF);		//mask the values.
 8000bcc:	897b      	ldrh	r3, [r7, #10]
 8000bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e03d      	b.n	8000c56 <I2C_Init+0x12a>
	}
	else {	//fast mode (FM)
		tempReg |= (1 << 15);	// 1 = Fast Mode (FM), bit postion 15
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be0:	60fb      	str	r3, [r7, #12]
		tempReg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);	// bit position 14 configures the DUTY bit
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7a9b      	ldrb	r3, [r3, #10]
 8000be6:	039b      	lsls	r3, r3, #14
 8000be8:	461a      	mov	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

		if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == 0) {		// DUTY = 0, T-HIGH + T-LOW = 3 * CCR * T-PCLK1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7a9b      	ldrb	r3, [r3, #10]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d111      	bne.n	8000c1c <I2C_Init+0xf0>

			CCR_Value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed)); //@note: Formula for how this was derived is in video #191. Reference Duty Cycle also
 8000bf8:	f000 fc76 	bl	80014e8 <RCC_GetPCLK1Value>
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0c:	817b      	strh	r3, [r7, #10]
			tempReg |= (CCR_Value & 0xFFF);
 8000c0e:	897b      	ldrh	r3, [r7, #10]
 8000c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	e016      	b.n	8000c4a <I2C_Init+0x11e>

		}
		else if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == 1) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7a9b      	ldrb	r3, [r3, #10]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d112      	bne.n	8000c4a <I2C_Init+0x11e>

			CCR_Value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed)); //@note: Formula for how this was derived is in video #191. Reference Duty Cycle also
 8000c24:	f000 fc60 	bl	80014e8 <RCC_GetPCLK1Value>
 8000c28:	4601      	mov	r1, r0
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	009a      	lsls	r2, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c3c:	817b      	strh	r3, [r7, #10]
			tempReg |= (CCR_Value & 0xFFF);
 8000c3e:	897b      	ldrh	r3, [r7, #10]
 8000c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]

		}
		tempReg |= (CCR_Value & 0xFFF);		//mask the values, 12-bit mask.
 8000c4a:	897b      	ldrh	r3, [r7, #10]
 8000c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->I2C_CCR |= tempReg;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	69d9      	ldr	r1, [r3, #28]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	61da      	str	r2, [r3, #28]

	/* TRISE configuration (refer to section 199)*/
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_ST) {	// standard mode
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <I2C_Init+0x174>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d804      	bhi.n	8000c7a <I2C_Init+0x14e>

		tempReg = ( RCC_GetPCLK1Value() * TRISE_ST_MAX) + 1;	// +1 is because the Data manual says so
 8000c70:	f000 fc3a 	bl	80014e8 <RCC_GetPCLK1Value>
 8000c74:	2301      	movs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e003      	b.n	8000c82 <I2C_Init+0x156>

	}
	else {
		tempReg = (RCC_GetPCLK1Value() * TRISE_FM_MAX) + 1;		// +1 is because the data manual says so
 8000c7a:	f000 fc35 	bl	80014e8 <RCC_GetPCLK1Value>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->I2C_TRISE = (tempReg & 0x3F);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c8c:	621a      	str	r2, [r3, #32]

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	000186a0 	.word	0x000186a0

08000ca4 <I2C_GenerateStartCondition>:
 *
 * @note        - This can only occur AFTER you check the TxE == 1 and BTF == 1.
 * @note		- STOP bit clears once hardware detects a STOP. So only need to set in this function, not clear.
 */

void I2C_GenerateStartCondition(I2Cx_Registers_t *pI2Cx) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_START);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]

}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <I2C_GenerateStopCondition>:
 *
 * @note        - This can only occur AFTER you check the TxE == 1 and BTF == 1.
 * @note		- STOP bit clears once hardware detects a STOP. So only need to set in this function, not clear.
 */

void I2C_GenerateStopCondition(I2Cx_Registers_t *pI2Cx) {
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]

	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]

}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <I2C_ExecuteAddressPhase>:
 * @return      - none
 *
 * @note        -
 */

void I2C_ExecuteAddressPhase(I2Cx_Registers_t *pI2Cx, uint8_t slaveAddr, uint8_t readOrWrite) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
 8000cec:	4613      	mov	r3, r2
 8000cee:	70bb      	strb	r3, [r7, #2]

	slaveAddr <<= 1;	//because the last bit is the writeOrRead bit
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	70fb      	strb	r3, [r7, #3]

	if (readOrWrite) { //note: READ = 1. So this would be a READ
 8000cf6:	78bb      	ldrb	r3, [r7, #2]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d004      	beq.n	8000d06 <I2C_ExecuteAddressPhase+0x26>
		slaveAddr |= 0x1;
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	70fb      	strb	r3, [r7, #3]
 8000d04:	e003      	b.n	8000d0e <I2C_ExecuteAddressPhase+0x2e>
	}
	else {	//note: WRITE = 0
		slaveAddr &= ~(0x01);
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	f023 0301 	bic.w	r3, r3, #1
 8000d0c:	70fb      	strb	r3, [r7, #3]
	}
	pI2Cx->I2C_DR = slaveAddr;
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	611a      	str	r2, [r3, #16]

}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <I2C_ClearADDRFlag>:
 *
 * @return      - none
 *
 * @note        - For info about ADDR, refer to data manual 27.6.6
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]

	uint32_t dummyRead;
	(void)dummyRead; // gets rid of warning message "unused variable"

	//check if in master or slave mode.
	if (pI2CHandle->pI2Cx->I2C_SR2 & (1 << I2C_SR2_MSL)) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01f      	beq.n	8000d74 <I2C_ClearADDRFlag+0x56>

		//device is in master mode
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7f1b      	ldrb	r3, [r3, #28]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d112      	bne.n	8000d62 <I2C_ClearADDRFlag+0x44>

			if (pI2CHandle->RxSize == 1) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d11f      	bne.n	8000d84 <I2C_ClearADDRFlag+0x66>

				// first disable the ACKing.
				I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fed3 	bl	8000af6 <I2C_ACKControl>

				// can now clear the ADDR flag (read SR1, then read SR2)
				dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
		dummyRead = pI2CHandle->pI2Cx->I2C_SR2;

	}

}
 8000d60:	e010      	b.n	8000d84 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	60fb      	str	r3, [r7, #12]
}
 8000d72:	e007      	b.n	8000d84 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	60fb      	str	r3, [r7, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <I2C_SR1_GetFlagStatus>:

uint8_t I2C_SR1_GetFlagStatus(I2Cx_Registers_t *pI2Cx, uint32_t flagName) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]

	uint32_t flag = pI2Cx->I2C_SR1;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	60fb      	str	r3, [r7, #12]
	if (flag & flagName) {
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <I2C_SR1_GetFlagStatus+0x1e>
		return FLAG_SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <I2C_SR1_GetFlagStatus+0x20>
	}
	else {
		return FLAG_RESET;
 8000daa:	2300      	movs	r3, #0
	}

}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <I2C_MasterSendData>:
 *
 * @return      - none
 * @note        - Refer to clock tree and RCC registers.
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t Sr) {
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	70fb      	strb	r3, [r7, #3]

	/* Step 1: Generate the start condition */
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff6b 	bl	8000ca4 <I2C_GenerateStartCondition>

	/* Step 2: Confirm that start generation is completed by checking the SB flag in the SR1. Note: Until SB is cleared SCL will be stretched (Pulled to LOW) */
 	while(!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) { // SB = "Start bit" Sets when start condition is generated by the master.
 8000dce:	bf00      	nop
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffd8 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f6      	beq.n	8000dd0 <I2C_MasterSendData+0x1a>
		// do nothing. Wai`t until the START is generated by the master (SB == 1)
	}

	/* Step 3: Send the address of the slave with r/w bit set to WRITE!!! (0) (total 8-bits, 7 + 1) */
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr, WRITE); // sends slave address
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	78f9      	ldrb	r1, [r7, #3]
 8000de8:	2200      	movs	r2, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff78 	bl	8000ce0 <I2C_ExecuteAddressPhase>

	while (!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8000df0:	bf00      	nop
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2102      	movs	r1, #2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ffc7 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f6      	beq.n	8000df2 <I2C_MasterSendData+0x3c>

		// confirm address phase is completed by checking the ADDR flag.
	}
	/* Step 5: Clear the ADDR flag by reading from SR1, then SR2 */
	// If we reach below then means ACK was sent back.
	I2C_ClearADDRFlag(pI2CHandle); // clears by reading SR1, then SR2 using dummy values.
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f7ff ff8a 	bl	8000d1e <I2C_ClearADDRFlag>

	/* Step 6: Send data until the len = 0 */

	// automatic ACKing so we don't have to really check for that.

	while (len > 0) { // acking is done automatically
 8000e0a:	e014      	b.n	8000e36 <I2C_MasterSendData+0x80>

			while (!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { // waits until the TxE buffer is emtpy.
 8000e0c:	bf00      	nop
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffb9 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f6      	beq.n	8000e0e <I2C_MasterSendData+0x58>
				//do nothing except for wait until TXE buffer is completly empty.
			}

			//load the I2C data register
			pI2CHandle->pI2Cx->I2C_DR = *pTxBuffer;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	611a      	str	r2, [r3, #16]
			pTxBuffer++;
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
			len--;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
	while (len > 0) { // acking is done automatically
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e7      	bne.n	8000e0c <I2C_MasterSendData+0x56>
	}
	/* Step 7: before generating STOP need to check TxE and BTF flags to make sure buffer is empty and byte transmission has finished. */
	while (!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000e3c:	bf00      	nop
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ffa1 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f6      	beq.n	8000e3e <I2C_MasterSendData+0x88>
	// btf won't set
	while (!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000e50:	bf00      	nop
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2104      	movs	r1, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff97 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f6      	beq.n	8000e52 <I2C_MasterSendData+0x9c>

	/* Step 8: generate the stop condition */
	if (Sr == I2C_DISABLE_SR) {
 8000e64:	7e3b      	ldrb	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d104      	bne.n	8000e74 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff27 	bl	8000cc2 <I2C_GenerateStopCondition>
	}



}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <I2C_MasterReceiveData>:
 * @return      - none
 *
 * @note        -
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	71bb      	strb	r3, [r7, #6]

	uint32_t dummyRead;
	(void)dummyRead;
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff04 	bl	8000ca4 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while (!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000e9c:	bf00      	nop
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff71 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f6      	beq.n	8000e9e <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, READ);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	79b9      	ldrb	r1, [r7, #6]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff11 	bl	8000ce0 <I2C_ExecuteAddressPhase>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while (! I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000ebe:	bf00      	nop
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff60 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f6      	beq.n	8000ec0 <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d121      	bne.n	8000f1c <I2C_MasterReceiveData+0xa0>
	{

		//Disable Acking
		I2C_ACKControl(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe09 	bl	8000af6 <I2C_ACKControl>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff ff1a 	bl	8000d1e <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while (!I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000eea:	bf00      	nop
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff4a 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f6      	beq.n	8000eec <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if (Sr == I2C_DISABLE_SR) {
 8000efe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d104      	bne.n	8000f10 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fed9 	bl	8000cc2 <I2C_GenerateStopCondition>
		}

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	701a      	strb	r2, [r3, #0]

	}

    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d930      	bls.n	8000f84 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff fefb 	bl	8000d1e <I2C_ClearADDRFlag>
		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e027      	b.n	8000f7e <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while( !I2C_SR1_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000f2e:	bf00      	nop
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff28 	bl	8000d8c <I2C_SR1_GetFlagStatus>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f6      	beq.n	8000f30 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d10e      	bne.n	8000f66 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ACKControl(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fdd1 	bl	8000af6 <I2C_ACKControl>

				// could have a repeated start. check the github file for refernce
				if (Sr == I2C_DISABLE_SR) {
 8000f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d104      	bne.n	8000f66 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff feae 	bl	8000cc2 <I2C_GenerateStopCondition>
				}
			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3301      	adds	r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1d4      	bne.n	8000f2e <I2C_MasterReceiveData+0xb2>
		}

	}
	//re-enable ACKing
	if (pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	7a5b      	ldrb	r3, [r3, #9]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d105      	bne.n	8000f98 <I2C_MasterReceiveData+0x11c>
		I2C_ACKControl(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fdaf 	bl	8000af6 <I2C_ACKControl>
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <GPIO_Init>:
 *
 * @return 		- none
 *
 * @note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f9b6 	bl	8001320 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

	// 1. Configure depending on if it is in Alternate Function mode.


	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	795b      	ldrb	r3, [r3, #5]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d821      	bhi.n	8001004 <GPIO_Init+0x64>
		//the non interrupt modes input, output, alternate function, and analog mode.
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 * (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); 			// clears the bits
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	440b      	add	r3, r1
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4619      	mov	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	400a      	ands	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																	// sets the bits
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6819      	ldr	r1, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e0e3      	b.n	80011cc <GPIO_Init+0x22c>
	}
	else {
		// the interrupt modes.
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	795b      	ldrb	r3, [r3, #5]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d117      	bne.n	800103c <GPIO_Init+0x9c>
		
			//configure the EXTI_FTSR. IMPORTANT!!! Make sure the EXTI_RTSR is == LOW also!!!!
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800100c:	4b51      	ldr	r3, [pc, #324]	; (8001154 <GPIO_Init+0x1b4>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	7912      	ldrb	r2, [r2, #4]
 8001014:	4611      	mov	r1, r2
 8001016:	2201      	movs	r2, #1
 8001018:	408a      	lsls	r2, r1
 800101a:	43d2      	mvns	r2, r2
 800101c:	4611      	mov	r1, r2
 800101e:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <GPIO_Init+0x1b4>)
 8001020:	400b      	ands	r3, r1
 8001022:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001024:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <GPIO_Init+0x1b4>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	7912      	ldrb	r2, [r2, #4]
 800102c:	4611      	mov	r1, r2
 800102e:	2201      	movs	r2, #1
 8001030:	408a      	lsls	r2, r1
 8001032:	4611      	mov	r1, r2
 8001034:	4a47      	ldr	r2, [pc, #284]	; (8001154 <GPIO_Init+0x1b4>)
 8001036:	430b      	orrs	r3, r1
 8001038:	60d3      	str	r3, [r2, #12]
 800103a:	e035      	b.n	80010a8 <GPIO_Init+0x108>

		}	
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	2b05      	cmp	r3, #5
 8001042:	d117      	bne.n	8001074 <GPIO_Init+0xd4>

			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <GPIO_Init+0x1b4>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	7912      	ldrb	r2, [r2, #4]
 800104c:	4611      	mov	r1, r2
 800104e:	2201      	movs	r2, #1
 8001050:	408a      	lsls	r2, r1
 8001052:	43d2      	mvns	r2, r2
 8001054:	4611      	mov	r1, r2
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <GPIO_Init+0x1b4>)
 8001058:	400b      	ands	r3, r1
 800105a:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <GPIO_Init+0x1b4>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	7912      	ldrb	r2, [r2, #4]
 8001064:	4611      	mov	r1, r2
 8001066:	2201      	movs	r2, #1
 8001068:	408a      	lsls	r2, r1
 800106a:	4611      	mov	r1, r2
 800106c:	4a39      	ldr	r2, [pc, #228]	; (8001154 <GPIO_Init+0x1b4>)
 800106e:	430b      	orrs	r3, r1
 8001070:	6093      	str	r3, [r2, #8]
 8001072:	e019      	b.n	80010a8 <GPIO_Init+0x108>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	2b06      	cmp	r3, #6
 800107a:	d115      	bne.n	80010a8 <GPIO_Init+0x108>
			// configure both EXTI_FTSR and EXTI_RTSR	
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <GPIO_Init+0x1b4>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	7912      	ldrb	r2, [r2, #4]
 8001084:	4611      	mov	r1, r2
 8001086:	2201      	movs	r2, #1
 8001088:	408a      	lsls	r2, r1
 800108a:	4611      	mov	r1, r2
 800108c:	4a31      	ldr	r2, [pc, #196]	; (8001154 <GPIO_Init+0x1b4>)
 800108e:	430b      	orrs	r3, r1
 8001090:	6093      	str	r3, [r2, #8]
            EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <GPIO_Init+0x1b4>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	7912      	ldrb	r2, [r2, #4]
 800109a:	4611      	mov	r1, r2
 800109c:	2201      	movs	r2, #1
 800109e:	408a      	lsls	r2, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <GPIO_Init+0x1b4>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	60d3      	str	r3, [r2, #12]

		}

		// 2.) Configure the GPIO port selection in SYSCFG_EXTICR (aka system config external interrupt register.
		uint8_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;		// determines which EXTI#
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	74fb      	strb	r3, [r7, #19]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;	// for bit shifting.
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	791b      	ldrb	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a26      	ldr	r2, [pc, #152]	; (8001158 <GPIO_Init+0x1b8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d05f      	beq.n	8001184 <GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a24      	ldr	r2, [pc, #144]	; (800115c <GPIO_Init+0x1bc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d040      	beq.n	8001150 <GPIO_Init+0x1b0>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <GPIO_Init+0x1c0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d039      	beq.n	800114c <GPIO_Init+0x1ac>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <GPIO_Init+0x1c4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d032      	beq.n	8001148 <GPIO_Init+0x1a8>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <GPIO_Init+0x1c8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d02b      	beq.n	8001144 <GPIO_Init+0x1a4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <GPIO_Init+0x1cc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d024      	beq.n	8001140 <GPIO_Init+0x1a0>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <GPIO_Init+0x1d0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d01d      	beq.n	800113c <GPIO_Init+0x19c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <GPIO_Init+0x1d4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d016      	beq.n	8001138 <GPIO_Init+0x198>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <GPIO_Init+0x1d8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00f      	beq.n	8001134 <GPIO_Init+0x194>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <GPIO_Init+0x1dc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d008      	beq.n	8001130 <GPIO_Init+0x190>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <GPIO_Init+0x1e0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <GPIO_Init+0x18c>
 8001128:	230a      	movs	r3, #10
 800112a:	e02c      	b.n	8001186 <GPIO_Init+0x1e6>
 800112c:	2300      	movs	r3, #0
 800112e:	e02a      	b.n	8001186 <GPIO_Init+0x1e6>
 8001130:	2309      	movs	r3, #9
 8001132:	e028      	b.n	8001186 <GPIO_Init+0x1e6>
 8001134:	2308      	movs	r3, #8
 8001136:	e026      	b.n	8001186 <GPIO_Init+0x1e6>
 8001138:	2307      	movs	r3, #7
 800113a:	e024      	b.n	8001186 <GPIO_Init+0x1e6>
 800113c:	2306      	movs	r3, #6
 800113e:	e022      	b.n	8001186 <GPIO_Init+0x1e6>
 8001140:	2305      	movs	r3, #5
 8001142:	e020      	b.n	8001186 <GPIO_Init+0x1e6>
 8001144:	2304      	movs	r3, #4
 8001146:	e01e      	b.n	8001186 <GPIO_Init+0x1e6>
 8001148:	2303      	movs	r3, #3
 800114a:	e01c      	b.n	8001186 <GPIO_Init+0x1e6>
 800114c:	2302      	movs	r3, #2
 800114e:	e01a      	b.n	8001186 <GPIO_Init+0x1e6>
 8001150:	2301      	movs	r3, #1
 8001152:	e018      	b.n	8001186 <GPIO_Init+0x1e6>
 8001154:	40013c00 	.word	0x40013c00
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40021400 	.word	0x40021400
 8001170:	40021800 	.word	0x40021800
 8001174:	40021c00 	.word	0x40021c00
 8001178:	40022000 	.word	0x40022000
 800117c:	40022400 	.word	0x40022400
 8001180:	40022800 	.word	0x40022800
 8001184:	2300      	movs	r3, #0
 8001186:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <GPIO_Init+0x374>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	4a61      	ldr	r2, [pc, #388]	; (8001314 <GPIO_Init+0x374>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (temp2 * 4));
 8001194:	4a60      	ldr	r2, [pc, #384]	; (8001318 <GPIO_Init+0x378>)
 8001196:	7cfb      	ldrb	r3, [r7, #19]
 8001198:	3302      	adds	r3, #2
 800119a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800119e:	7c79      	ldrb	r1, [r7, #17]
 80011a0:	7cbb      	ldrb	r3, [r7, #18]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	495b      	ldr	r1, [pc, #364]	; (8001318 <GPIO_Init+0x378>)
 80011ac:	7cfb      	ldrb	r3, [r7, #19]
 80011ae:	4302      	orrs	r2, r0
 80011b0:	3302      	adds	r3, #2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// 3.) Enable the exti interrupt delivery using IMR (aka interrupt mask register)
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//interrupt goes over this line.
 80011b6:	4b59      	ldr	r3, [pc, #356]	; (800131c <GPIO_Init+0x37c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7912      	ldrb	r2, [r2, #4]
 80011be:	4611      	mov	r1, r2
 80011c0:	2201      	movs	r2, #1
 80011c2:	408a      	lsls	r2, r1
 80011c4:	4611      	mov	r1, r2
 80011c6:	4a55      	ldr	r2, [pc, #340]	; (800131c <GPIO_Init+0x37c>)
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	799b      	ldrb	r3, [r3, #6]
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	791b      	ldrb	r3, [r3, #4]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 * (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// clears the bits
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	4619      	mov	r1, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	440b      	add	r3, r1
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	43db      	mvns	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	400a      	ands	r2, r1
 8001200:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																// sets the bits
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6899      	ldr	r1, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
	temp = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]

	// 3. configure the pullup/pulldown settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	79db      	ldrb	r3, [r3, #7]
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	791b      	ldrb	r3, [r3, #4]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 * (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// clears the bits
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	791b      	ldrb	r3, [r3, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	460b      	mov	r3, r1
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	440b      	add	r3, r1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	43db      	mvns	r3, r3
 800123e:	4619      	mov	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;																	// sets te bits
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68d9      	ldr	r1, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]
    temp = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

	// 4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7a1b      	ldrb	r3, [r3, #8]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
	//clear the space
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);			// clears bits
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	4619      	mov	r1, r3
 8001278:	2301      	movs	r3, #1
 800127a:	408b      	lsls	r3, r1
 800127c:	43db      	mvns	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;															// sets bits
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
	temp = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) { // can only configure if not in a general purpose input/output mode
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d132      	bne.n	800130a <GPIO_Init+0x36a>
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; 			// can only be 0 or 1 in value. Determines if HIGH or LOW register is selected.
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;			// determines how many bit shifts to do. Each pin has 4 bit fields so *4 is a must
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));			// clears bits
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	210f      	movs	r1, #15
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4011      	ands	r1, r2
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	3208      	adds	r2, #8
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));			// x4 is important, each value has 4-bitfields per pin.
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7a5b      	ldrb	r3, [r3, #9]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4311      	orrs	r1, r2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	3208      	adds	r2, #8
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40013c00 	.word	0x40013c00

08001320 <GPIO_PeriClockControl>:
 *
 * @return 		- none
 *
 * @note		- none
 */
void GPIO_PeriClockControl(GPIOx_Registers_t *pGPIOx, uint8_t ENorDI) { //ENorDI = "Enable or disable"
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	
	if(pGPIOx == GPIOA) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a64      	ldr	r2, [pc, #400]	; (80014c0 <GPIO_PeriClockControl+0x1a0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d106      	bne.n	8001342 <GPIO_PeriClockControl+0x22>
		GPIOA_PCLK_EN();
 8001334:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a62      	ldr	r2, [pc, #392]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
    	}   


	}

}
 8001340:	e0b9      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOB) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <GPIO_PeriClockControl+0x1a8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d106      	bne.n	8001358 <GPIO_PeriClockControl+0x38>
		GPIOB_PCLK_EN();
 800134a:	4b5e      	ldr	r3, [pc, #376]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a5d      	ldr	r2, [pc, #372]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001356:	e0ae      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOC) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a5c      	ldr	r2, [pc, #368]	; (80014cc <GPIO_PeriClockControl+0x1ac>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d106      	bne.n	800136e <GPIO_PeriClockControl+0x4e>
		GPIOC_PCLK_EN();
 8001360:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800136c:	e0a3      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOD) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a57      	ldr	r2, [pc, #348]	; (80014d0 <GPIO_PeriClockControl+0x1b0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d106      	bne.n	8001384 <GPIO_PeriClockControl+0x64>
		GPIOD_PCLK_EN();
 8001376:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001382:	e098      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOE) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <GPIO_PeriClockControl+0x1b4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d106      	bne.n	800139a <GPIO_PeriClockControl+0x7a>
		GPIOE_PCLK_EN();
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001398:	e08d      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOF) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <GPIO_PeriClockControl+0x1b8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d106      	bne.n	80013b0 <GPIO_PeriClockControl+0x90>
		GPIOF_PCLK_EN();
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a47      	ldr	r2, [pc, #284]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013ae:	e082      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOG) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <GPIO_PeriClockControl+0x1bc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d106      	bne.n	80013c6 <GPIO_PeriClockControl+0xa6>
		GPIOG_PCLK_EN();
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a41      	ldr	r2, [pc, #260]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013c4:	e077      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOH) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a45      	ldr	r2, [pc, #276]	; (80014e0 <GPIO_PeriClockControl+0x1c0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d106      	bne.n	80013dc <GPIO_PeriClockControl+0xbc>
		GPIOH_PCLK_EN();
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a3c      	ldr	r2, [pc, #240]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013da:	e06c      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
	else if (pGPIOx == GPIOI) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <GPIO_PeriClockControl+0x1c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <GPIO_PeriClockControl+0xd2>
		GPIOI_PCLK_EN();
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	4a36      	ldr	r2, [pc, #216]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013f0:	e061      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
		if(pGPIOx == GPIOA) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <GPIO_PeriClockControl+0x1a0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d106      	bne.n	8001408 <GPIO_PeriClockControl+0xe8>
        	GPIOA_PCLK_DI();
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001406:	e056      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOB) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <GPIO_PeriClockControl+0x1a8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d106      	bne.n	800141e <GPIO_PeriClockControl+0xfe>
        	GPIOB_PCLK_DI();
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800141c:	e04b      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOC) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <GPIO_PeriClockControl+0x1ac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d106      	bne.n	8001434 <GPIO_PeriClockControl+0x114>
        	GPIOC_PCLK_DI();
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001432:	e040      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOD) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <GPIO_PeriClockControl+0x1b0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d106      	bne.n	800144a <GPIO_PeriClockControl+0x12a>
        	GPIOD_PCLK_DI();
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001442:	f023 0308 	bic.w	r3, r3, #8
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001448:	e035      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOE) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <GPIO_PeriClockControl+0x1b4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d106      	bne.n	8001460 <GPIO_PeriClockControl+0x140>
        	GPIOE_PCLK_DI();
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001458:	f023 0310 	bic.w	r3, r3, #16
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800145e:	e02a      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOF) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <GPIO_PeriClockControl+0x1b8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d106      	bne.n	8001476 <GPIO_PeriClockControl+0x156>
        	GPIOF_PCLK_DI();
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800146e:	f023 0320 	bic.w	r3, r3, #32
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001474:	e01f      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOG) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <GPIO_PeriClockControl+0x1bc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d106      	bne.n	800148c <GPIO_PeriClockControl+0x16c>
        	GPIOG_PCLK_DI();
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800148a:	e014      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOH) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <GPIO_PeriClockControl+0x1c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d106      	bne.n	80014a2 <GPIO_PeriClockControl+0x182>
        	GPIOH_PCLK_DI();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 800149a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800149e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014a0:	e009      	b.n	80014b6 <GPIO_PeriClockControl+0x196>
    	else if (pGPIOx == GPIOI) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <GPIO_PeriClockControl+0x1c4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d105      	bne.n	80014b6 <GPIO_PeriClockControl+0x196>
        	GPIOI_PCLK_DI();
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <GPIO_PeriClockControl+0x1a4>)
 80014b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	40022000 	.word	0x40022000

080014e8 <RCC_GetPCLK1Value>:
 * @param       - none
 *
 * @return      - the clock speed value in Mhz.
 *
 */
uint32_t RCC_GetPCLK1Value(void) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0

	uint8_t clksrc;
	uint32_t sysClkSpeed; 	//system clock speed
	uint8_t AHBPrescaler;
	uint8_t APB1Prescaler;
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <RCC_GetPCLK1Value+0x8c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	707b      	strb	r3, [r7, #1]

	if (clksrc == 0) {	// HSI clock
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <RCC_GetPCLK1Value+0x20>
		sysClkSpeed = 16000000;		// 16 Mhz
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <RCC_GetPCLK1Value+0x90>)
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e004      	b.n	8001512 <RCC_GetPCLK1Value+0x2a>
	}
	else if (clksrc == 1) {	//HSE clock
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <RCC_GetPCLK1Value+0x2a>
		sysClkSpeed = 8000000;		// 8 Mhz
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <RCC_GetPCLK1Value+0x94>)
 8001510:	607b      	str	r3, [r7, #4]
	}

	/* Now to find out he prescaler values */

	uint8_t temp;
	temp = ((RCC->CFGR >> 4) & (0xF));
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <RCC_GetPCLK1Value+0x8c>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	703b      	strb	r3, [r7, #0]

	if (temp < 8) {
 8001520:	783b      	ldrb	r3, [r7, #0]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d802      	bhi.n	800152c <RCC_GetPCLK1Value+0x44>
		AHBPrescaler = 1; 	//no division occurs
 8001526:	2301      	movs	r3, #1
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	e005      	b.n	8001538 <RCC_GetPCLK1Value+0x50>
	}
	else {
		AHBPrescaler = AHB_PreScaler[temp - 8];
 800152c:	783b      	ldrb	r3, [r7, #0]
 800152e:	3b08      	subs	r3, #8
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <RCC_GetPCLK1Value+0x98>)
 8001532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001536:	70fb      	strb	r3, [r7, #3]
	}

	// find out the APB1 prescaler

	temp = ((RCC->CFGR >> 10) & (0x7));
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <RCC_GetPCLK1Value+0x8c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	0a9b      	lsrs	r3, r3, #10
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	703b      	strb	r3, [r7, #0]

	if (temp < 4) {
 8001546:	783b      	ldrb	r3, [r7, #0]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d802      	bhi.n	8001552 <RCC_GetPCLK1Value+0x6a>
		APB1Prescaler = 1; 	//no division occurs
 800154c:	2301      	movs	r3, #1
 800154e:	70bb      	strb	r3, [r7, #2]
 8001550:	e004      	b.n	800155c <RCC_GetPCLK1Value+0x74>
	}
	else {
		APB1Prescaler = APB1_PreScaler[temp - 4];
 8001552:	783b      	ldrb	r3, [r7, #0]
 8001554:	3b04      	subs	r3, #4
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <RCC_GetPCLK1Value+0x9c>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	70bb      	strb	r3, [r7, #2]
	}

	return (sysClkSpeed/AHBPrescaler/APB1Prescaler); // the peripheral clock speed after prescalers and system clock taken into account.
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	fbb2 f2f3 	udiv	r2, r2, r3
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800
 8001578:	00f42400 	.word	0x00f42400
 800157c:	007a1200 	.word	0x007a1200
 8001580:	20000000 	.word	0x20000000
 8001584:	20000010 	.word	0x20000010

08001588 <__libc_init_array>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	4d0d      	ldr	r5, [pc, #52]	; (80015c0 <__libc_init_array+0x38>)
 800158c:	4c0d      	ldr	r4, [pc, #52]	; (80015c4 <__libc_init_array+0x3c>)
 800158e:	1b64      	subs	r4, r4, r5
 8001590:	10a4      	asrs	r4, r4, #2
 8001592:	2600      	movs	r6, #0
 8001594:	42a6      	cmp	r6, r4
 8001596:	d109      	bne.n	80015ac <__libc_init_array+0x24>
 8001598:	4d0b      	ldr	r5, [pc, #44]	; (80015c8 <__libc_init_array+0x40>)
 800159a:	4c0c      	ldr	r4, [pc, #48]	; (80015cc <__libc_init_array+0x44>)
 800159c:	f001 fae2 	bl	8002b64 <_init>
 80015a0:	1b64      	subs	r4, r4, r5
 80015a2:	10a4      	asrs	r4, r4, #2
 80015a4:	2600      	movs	r6, #0
 80015a6:	42a6      	cmp	r6, r4
 80015a8:	d105      	bne.n	80015b6 <__libc_init_array+0x2e>
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
 80015ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b0:	4798      	blx	r3
 80015b2:	3601      	adds	r6, #1
 80015b4:	e7ee      	b.n	8001594 <__libc_init_array+0xc>
 80015b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ba:	4798      	blx	r3
 80015bc:	3601      	adds	r6, #1
 80015be:	e7f2      	b.n	80015a6 <__libc_init_array+0x1e>
 80015c0:	08002d38 	.word	0x08002d38
 80015c4:	08002d38 	.word	0x08002d38
 80015c8:	08002d38 	.word	0x08002d38
 80015cc:	08002d3c 	.word	0x08002d3c

080015d0 <memset>:
 80015d0:	4402      	add	r2, r0
 80015d2:	4603      	mov	r3, r0
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <memset+0xa>
 80015d8:	4770      	bx	lr
 80015da:	f803 1b01 	strb.w	r1, [r3], #1
 80015de:	e7f9      	b.n	80015d4 <memset+0x4>

080015e0 <iprintf>:
 80015e0:	b40f      	push	{r0, r1, r2, r3}
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <iprintf+0x2c>)
 80015e4:	b513      	push	{r0, r1, r4, lr}
 80015e6:	681c      	ldr	r4, [r3, #0]
 80015e8:	b124      	cbz	r4, 80015f4 <iprintf+0x14>
 80015ea:	69a3      	ldr	r3, [r4, #24]
 80015ec:	b913      	cbnz	r3, 80015f4 <iprintf+0x14>
 80015ee:	4620      	mov	r0, r4
 80015f0:	f000 fa5a 	bl	8001aa8 <__sinit>
 80015f4:	ab05      	add	r3, sp, #20
 80015f6:	9a04      	ldr	r2, [sp, #16]
 80015f8:	68a1      	ldr	r1, [r4, #8]
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	4620      	mov	r0, r4
 80015fe:	f000 fc5f 	bl	8001ec0 <_vfiprintf_r>
 8001602:	b002      	add	sp, #8
 8001604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001608:	b004      	add	sp, #16
 800160a:	4770      	bx	lr
 800160c:	20000014 	.word	0x20000014

08001610 <_puts_r>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	460e      	mov	r6, r1
 8001614:	4605      	mov	r5, r0
 8001616:	b118      	cbz	r0, 8001620 <_puts_r+0x10>
 8001618:	6983      	ldr	r3, [r0, #24]
 800161a:	b90b      	cbnz	r3, 8001620 <_puts_r+0x10>
 800161c:	f000 fa44 	bl	8001aa8 <__sinit>
 8001620:	69ab      	ldr	r3, [r5, #24]
 8001622:	68ac      	ldr	r4, [r5, #8]
 8001624:	b913      	cbnz	r3, 800162c <_puts_r+0x1c>
 8001626:	4628      	mov	r0, r5
 8001628:	f000 fa3e 	bl	8001aa8 <__sinit>
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <_puts_r+0xd0>)
 800162e:	429c      	cmp	r4, r3
 8001630:	d120      	bne.n	8001674 <_puts_r+0x64>
 8001632:	686c      	ldr	r4, [r5, #4]
 8001634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001636:	07db      	lsls	r3, r3, #31
 8001638:	d405      	bmi.n	8001646 <_puts_r+0x36>
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	0598      	lsls	r0, r3, #22
 800163e:	d402      	bmi.n	8001646 <_puts_r+0x36>
 8001640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001642:	f000 facf 	bl	8001be4 <__retarget_lock_acquire_recursive>
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	0719      	lsls	r1, r3, #28
 800164a:	d51d      	bpl.n	8001688 <_puts_r+0x78>
 800164c:	6923      	ldr	r3, [r4, #16]
 800164e:	b1db      	cbz	r3, 8001688 <_puts_r+0x78>
 8001650:	3e01      	subs	r6, #1
 8001652:	68a3      	ldr	r3, [r4, #8]
 8001654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001658:	3b01      	subs	r3, #1
 800165a:	60a3      	str	r3, [r4, #8]
 800165c:	bb39      	cbnz	r1, 80016ae <_puts_r+0x9e>
 800165e:	2b00      	cmp	r3, #0
 8001660:	da38      	bge.n	80016d4 <_puts_r+0xc4>
 8001662:	4622      	mov	r2, r4
 8001664:	210a      	movs	r1, #10
 8001666:	4628      	mov	r0, r5
 8001668:	f000 f848 	bl	80016fc <__swbuf_r>
 800166c:	3001      	adds	r0, #1
 800166e:	d011      	beq.n	8001694 <_puts_r+0x84>
 8001670:	250a      	movs	r5, #10
 8001672:	e011      	b.n	8001698 <_puts_r+0x88>
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <_puts_r+0xd4>)
 8001676:	429c      	cmp	r4, r3
 8001678:	d101      	bne.n	800167e <_puts_r+0x6e>
 800167a:	68ac      	ldr	r4, [r5, #8]
 800167c:	e7da      	b.n	8001634 <_puts_r+0x24>
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <_puts_r+0xd8>)
 8001680:	429c      	cmp	r4, r3
 8001682:	bf08      	it	eq
 8001684:	68ec      	ldreq	r4, [r5, #12]
 8001686:	e7d5      	b.n	8001634 <_puts_r+0x24>
 8001688:	4621      	mov	r1, r4
 800168a:	4628      	mov	r0, r5
 800168c:	f000 f888 	bl	80017a0 <__swsetup_r>
 8001690:	2800      	cmp	r0, #0
 8001692:	d0dd      	beq.n	8001650 <_puts_r+0x40>
 8001694:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800169a:	07da      	lsls	r2, r3, #31
 800169c:	d405      	bmi.n	80016aa <_puts_r+0x9a>
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	059b      	lsls	r3, r3, #22
 80016a2:	d402      	bmi.n	80016aa <_puts_r+0x9a>
 80016a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016a6:	f000 fa9e 	bl	8001be6 <__retarget_lock_release_recursive>
 80016aa:	4628      	mov	r0, r5
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da04      	bge.n	80016bc <_puts_r+0xac>
 80016b2:	69a2      	ldr	r2, [r4, #24]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dc06      	bgt.n	80016c6 <_puts_r+0xb6>
 80016b8:	290a      	cmp	r1, #10
 80016ba:	d004      	beq.n	80016c6 <_puts_r+0xb6>
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6022      	str	r2, [r4, #0]
 80016c2:	7019      	strb	r1, [r3, #0]
 80016c4:	e7c5      	b.n	8001652 <_puts_r+0x42>
 80016c6:	4622      	mov	r2, r4
 80016c8:	4628      	mov	r0, r5
 80016ca:	f000 f817 	bl	80016fc <__swbuf_r>
 80016ce:	3001      	adds	r0, #1
 80016d0:	d1bf      	bne.n	8001652 <_puts_r+0x42>
 80016d2:	e7df      	b.n	8001694 <_puts_r+0x84>
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	250a      	movs	r5, #10
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	6022      	str	r2, [r4, #0]
 80016dc:	701d      	strb	r5, [r3, #0]
 80016de:	e7db      	b.n	8001698 <_puts_r+0x88>
 80016e0:	08002ca8 	.word	0x08002ca8
 80016e4:	08002cc8 	.word	0x08002cc8
 80016e8:	08002c88 	.word	0x08002c88

080016ec <puts>:
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <puts+0xc>)
 80016ee:	4601      	mov	r1, r0
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f7ff bf8d 	b.w	8001610 <_puts_r>
 80016f6:	bf00      	nop
 80016f8:	20000014 	.word	0x20000014

080016fc <__swbuf_r>:
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fe:	460e      	mov	r6, r1
 8001700:	4614      	mov	r4, r2
 8001702:	4605      	mov	r5, r0
 8001704:	b118      	cbz	r0, 800170e <__swbuf_r+0x12>
 8001706:	6983      	ldr	r3, [r0, #24]
 8001708:	b90b      	cbnz	r3, 800170e <__swbuf_r+0x12>
 800170a:	f000 f9cd 	bl	8001aa8 <__sinit>
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <__swbuf_r+0x98>)
 8001710:	429c      	cmp	r4, r3
 8001712:	d12b      	bne.n	800176c <__swbuf_r+0x70>
 8001714:	686c      	ldr	r4, [r5, #4]
 8001716:	69a3      	ldr	r3, [r4, #24]
 8001718:	60a3      	str	r3, [r4, #8]
 800171a:	89a3      	ldrh	r3, [r4, #12]
 800171c:	071a      	lsls	r2, r3, #28
 800171e:	d52f      	bpl.n	8001780 <__swbuf_r+0x84>
 8001720:	6923      	ldr	r3, [r4, #16]
 8001722:	b36b      	cbz	r3, 8001780 <__swbuf_r+0x84>
 8001724:	6923      	ldr	r3, [r4, #16]
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	1ac0      	subs	r0, r0, r3
 800172a:	6963      	ldr	r3, [r4, #20]
 800172c:	b2f6      	uxtb	r6, r6
 800172e:	4283      	cmp	r3, r0
 8001730:	4637      	mov	r7, r6
 8001732:	dc04      	bgt.n	800173e <__swbuf_r+0x42>
 8001734:	4621      	mov	r1, r4
 8001736:	4628      	mov	r0, r5
 8001738:	f000 f922 	bl	8001980 <_fflush_r>
 800173c:	bb30      	cbnz	r0, 800178c <__swbuf_r+0x90>
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	3b01      	subs	r3, #1
 8001742:	60a3      	str	r3, [r4, #8]
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	6022      	str	r2, [r4, #0]
 800174a:	701e      	strb	r6, [r3, #0]
 800174c:	6963      	ldr	r3, [r4, #20]
 800174e:	3001      	adds	r0, #1
 8001750:	4283      	cmp	r3, r0
 8001752:	d004      	beq.n	800175e <__swbuf_r+0x62>
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	d506      	bpl.n	8001768 <__swbuf_r+0x6c>
 800175a:	2e0a      	cmp	r6, #10
 800175c:	d104      	bne.n	8001768 <__swbuf_r+0x6c>
 800175e:	4621      	mov	r1, r4
 8001760:	4628      	mov	r0, r5
 8001762:	f000 f90d 	bl	8001980 <_fflush_r>
 8001766:	b988      	cbnz	r0, 800178c <__swbuf_r+0x90>
 8001768:	4638      	mov	r0, r7
 800176a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <__swbuf_r+0x9c>)
 800176e:	429c      	cmp	r4, r3
 8001770:	d101      	bne.n	8001776 <__swbuf_r+0x7a>
 8001772:	68ac      	ldr	r4, [r5, #8]
 8001774:	e7cf      	b.n	8001716 <__swbuf_r+0x1a>
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <__swbuf_r+0xa0>)
 8001778:	429c      	cmp	r4, r3
 800177a:	bf08      	it	eq
 800177c:	68ec      	ldreq	r4, [r5, #12]
 800177e:	e7ca      	b.n	8001716 <__swbuf_r+0x1a>
 8001780:	4621      	mov	r1, r4
 8001782:	4628      	mov	r0, r5
 8001784:	f000 f80c 	bl	80017a0 <__swsetup_r>
 8001788:	2800      	cmp	r0, #0
 800178a:	d0cb      	beq.n	8001724 <__swbuf_r+0x28>
 800178c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001790:	e7ea      	b.n	8001768 <__swbuf_r+0x6c>
 8001792:	bf00      	nop
 8001794:	08002ca8 	.word	0x08002ca8
 8001798:	08002cc8 	.word	0x08002cc8
 800179c:	08002c88 	.word	0x08002c88

080017a0 <__swsetup_r>:
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <__swsetup_r+0xcc>)
 80017a2:	b570      	push	{r4, r5, r6, lr}
 80017a4:	681d      	ldr	r5, [r3, #0]
 80017a6:	4606      	mov	r6, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	b125      	cbz	r5, 80017b6 <__swsetup_r+0x16>
 80017ac:	69ab      	ldr	r3, [r5, #24]
 80017ae:	b913      	cbnz	r3, 80017b6 <__swsetup_r+0x16>
 80017b0:	4628      	mov	r0, r5
 80017b2:	f000 f979 	bl	8001aa8 <__sinit>
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <__swsetup_r+0xd0>)
 80017b8:	429c      	cmp	r4, r3
 80017ba:	d10f      	bne.n	80017dc <__swsetup_r+0x3c>
 80017bc:	686c      	ldr	r4, [r5, #4]
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017c4:	0719      	lsls	r1, r3, #28
 80017c6:	d42c      	bmi.n	8001822 <__swsetup_r+0x82>
 80017c8:	06dd      	lsls	r5, r3, #27
 80017ca:	d411      	bmi.n	80017f0 <__swsetup_r+0x50>
 80017cc:	2309      	movs	r3, #9
 80017ce:	6033      	str	r3, [r6, #0]
 80017d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80017d4:	81a3      	strh	r3, [r4, #12]
 80017d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017da:	e03e      	b.n	800185a <__swsetup_r+0xba>
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <__swsetup_r+0xd4>)
 80017de:	429c      	cmp	r4, r3
 80017e0:	d101      	bne.n	80017e6 <__swsetup_r+0x46>
 80017e2:	68ac      	ldr	r4, [r5, #8]
 80017e4:	e7eb      	b.n	80017be <__swsetup_r+0x1e>
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <__swsetup_r+0xd8>)
 80017e8:	429c      	cmp	r4, r3
 80017ea:	bf08      	it	eq
 80017ec:	68ec      	ldreq	r4, [r5, #12]
 80017ee:	e7e6      	b.n	80017be <__swsetup_r+0x1e>
 80017f0:	0758      	lsls	r0, r3, #29
 80017f2:	d512      	bpl.n	800181a <__swsetup_r+0x7a>
 80017f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017f6:	b141      	cbz	r1, 800180a <__swsetup_r+0x6a>
 80017f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017fc:	4299      	cmp	r1, r3
 80017fe:	d002      	beq.n	8001806 <__swsetup_r+0x66>
 8001800:	4630      	mov	r0, r6
 8001802:	f000 fa57 	bl	8001cb4 <_free_r>
 8001806:	2300      	movs	r3, #0
 8001808:	6363      	str	r3, [r4, #52]	; 0x34
 800180a:	89a3      	ldrh	r3, [r4, #12]
 800180c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001810:	81a3      	strh	r3, [r4, #12]
 8001812:	2300      	movs	r3, #0
 8001814:	6063      	str	r3, [r4, #4]
 8001816:	6923      	ldr	r3, [r4, #16]
 8001818:	6023      	str	r3, [r4, #0]
 800181a:	89a3      	ldrh	r3, [r4, #12]
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	81a3      	strh	r3, [r4, #12]
 8001822:	6923      	ldr	r3, [r4, #16]
 8001824:	b94b      	cbnz	r3, 800183a <__swsetup_r+0x9a>
 8001826:	89a3      	ldrh	r3, [r4, #12]
 8001828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800182c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001830:	d003      	beq.n	800183a <__swsetup_r+0x9a>
 8001832:	4621      	mov	r1, r4
 8001834:	4630      	mov	r0, r6
 8001836:	f000 f9fd 	bl	8001c34 <__smakebuf_r>
 800183a:	89a0      	ldrh	r0, [r4, #12]
 800183c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001840:	f010 0301 	ands.w	r3, r0, #1
 8001844:	d00a      	beq.n	800185c <__swsetup_r+0xbc>
 8001846:	2300      	movs	r3, #0
 8001848:	60a3      	str	r3, [r4, #8]
 800184a:	6963      	ldr	r3, [r4, #20]
 800184c:	425b      	negs	r3, r3
 800184e:	61a3      	str	r3, [r4, #24]
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	b943      	cbnz	r3, 8001866 <__swsetup_r+0xc6>
 8001854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001858:	d1ba      	bne.n	80017d0 <__swsetup_r+0x30>
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	0781      	lsls	r1, r0, #30
 800185e:	bf58      	it	pl
 8001860:	6963      	ldrpl	r3, [r4, #20]
 8001862:	60a3      	str	r3, [r4, #8]
 8001864:	e7f4      	b.n	8001850 <__swsetup_r+0xb0>
 8001866:	2000      	movs	r0, #0
 8001868:	e7f7      	b.n	800185a <__swsetup_r+0xba>
 800186a:	bf00      	nop
 800186c:	20000014 	.word	0x20000014
 8001870:	08002ca8 	.word	0x08002ca8
 8001874:	08002cc8 	.word	0x08002cc8
 8001878:	08002c88 	.word	0x08002c88

0800187c <__sflush_r>:
 800187c:	898a      	ldrh	r2, [r1, #12]
 800187e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001880:	4605      	mov	r5, r0
 8001882:	0710      	lsls	r0, r2, #28
 8001884:	460c      	mov	r4, r1
 8001886:	d457      	bmi.n	8001938 <__sflush_r+0xbc>
 8001888:	684b      	ldr	r3, [r1, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dc04      	bgt.n	8001898 <__sflush_r+0x1c>
 800188e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001890:	2b00      	cmp	r3, #0
 8001892:	dc01      	bgt.n	8001898 <__sflush_r+0x1c>
 8001894:	2000      	movs	r0, #0
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800189a:	2e00      	cmp	r6, #0
 800189c:	d0fa      	beq.n	8001894 <__sflush_r+0x18>
 800189e:	2300      	movs	r3, #0
 80018a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80018a4:	682f      	ldr	r7, [r5, #0]
 80018a6:	602b      	str	r3, [r5, #0]
 80018a8:	d032      	beq.n	8001910 <__sflush_r+0x94>
 80018aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018ac:	89a3      	ldrh	r3, [r4, #12]
 80018ae:	075a      	lsls	r2, r3, #29
 80018b0:	d505      	bpl.n	80018be <__sflush_r+0x42>
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	1ac0      	subs	r0, r0, r3
 80018b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018b8:	b10b      	cbz	r3, 80018be <__sflush_r+0x42>
 80018ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018bc:	1ac0      	subs	r0, r0, r3
 80018be:	2300      	movs	r3, #0
 80018c0:	4602      	mov	r2, r0
 80018c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018c4:	6a21      	ldr	r1, [r4, #32]
 80018c6:	4628      	mov	r0, r5
 80018c8:	47b0      	blx	r6
 80018ca:	1c43      	adds	r3, r0, #1
 80018cc:	89a3      	ldrh	r3, [r4, #12]
 80018ce:	d106      	bne.n	80018de <__sflush_r+0x62>
 80018d0:	6829      	ldr	r1, [r5, #0]
 80018d2:	291d      	cmp	r1, #29
 80018d4:	d82c      	bhi.n	8001930 <__sflush_r+0xb4>
 80018d6:	4a29      	ldr	r2, [pc, #164]	; (800197c <__sflush_r+0x100>)
 80018d8:	40ca      	lsrs	r2, r1
 80018da:	07d6      	lsls	r6, r2, #31
 80018dc:	d528      	bpl.n	8001930 <__sflush_r+0xb4>
 80018de:	2200      	movs	r2, #0
 80018e0:	6062      	str	r2, [r4, #4]
 80018e2:	04d9      	lsls	r1, r3, #19
 80018e4:	6922      	ldr	r2, [r4, #16]
 80018e6:	6022      	str	r2, [r4, #0]
 80018e8:	d504      	bpl.n	80018f4 <__sflush_r+0x78>
 80018ea:	1c42      	adds	r2, r0, #1
 80018ec:	d101      	bne.n	80018f2 <__sflush_r+0x76>
 80018ee:	682b      	ldr	r3, [r5, #0]
 80018f0:	b903      	cbnz	r3, 80018f4 <__sflush_r+0x78>
 80018f2:	6560      	str	r0, [r4, #84]	; 0x54
 80018f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018f6:	602f      	str	r7, [r5, #0]
 80018f8:	2900      	cmp	r1, #0
 80018fa:	d0cb      	beq.n	8001894 <__sflush_r+0x18>
 80018fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001900:	4299      	cmp	r1, r3
 8001902:	d002      	beq.n	800190a <__sflush_r+0x8e>
 8001904:	4628      	mov	r0, r5
 8001906:	f000 f9d5 	bl	8001cb4 <_free_r>
 800190a:	2000      	movs	r0, #0
 800190c:	6360      	str	r0, [r4, #52]	; 0x34
 800190e:	e7c2      	b.n	8001896 <__sflush_r+0x1a>
 8001910:	6a21      	ldr	r1, [r4, #32]
 8001912:	2301      	movs	r3, #1
 8001914:	4628      	mov	r0, r5
 8001916:	47b0      	blx	r6
 8001918:	1c41      	adds	r1, r0, #1
 800191a:	d1c7      	bne.n	80018ac <__sflush_r+0x30>
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0c4      	beq.n	80018ac <__sflush_r+0x30>
 8001922:	2b1d      	cmp	r3, #29
 8001924:	d001      	beq.n	800192a <__sflush_r+0xae>
 8001926:	2b16      	cmp	r3, #22
 8001928:	d101      	bne.n	800192e <__sflush_r+0xb2>
 800192a:	602f      	str	r7, [r5, #0]
 800192c:	e7b2      	b.n	8001894 <__sflush_r+0x18>
 800192e:	89a3      	ldrh	r3, [r4, #12]
 8001930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001934:	81a3      	strh	r3, [r4, #12]
 8001936:	e7ae      	b.n	8001896 <__sflush_r+0x1a>
 8001938:	690f      	ldr	r7, [r1, #16]
 800193a:	2f00      	cmp	r7, #0
 800193c:	d0aa      	beq.n	8001894 <__sflush_r+0x18>
 800193e:	0793      	lsls	r3, r2, #30
 8001940:	680e      	ldr	r6, [r1, #0]
 8001942:	bf08      	it	eq
 8001944:	694b      	ldreq	r3, [r1, #20]
 8001946:	600f      	str	r7, [r1, #0]
 8001948:	bf18      	it	ne
 800194a:	2300      	movne	r3, #0
 800194c:	1bf6      	subs	r6, r6, r7
 800194e:	608b      	str	r3, [r1, #8]
 8001950:	2e00      	cmp	r6, #0
 8001952:	dd9f      	ble.n	8001894 <__sflush_r+0x18>
 8001954:	6a21      	ldr	r1, [r4, #32]
 8001956:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800195a:	4633      	mov	r3, r6
 800195c:	463a      	mov	r2, r7
 800195e:	4628      	mov	r0, r5
 8001960:	47e0      	blx	ip
 8001962:	2800      	cmp	r0, #0
 8001964:	dc06      	bgt.n	8001974 <__sflush_r+0xf8>
 8001966:	89a3      	ldrh	r3, [r4, #12]
 8001968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001972:	e790      	b.n	8001896 <__sflush_r+0x1a>
 8001974:	4407      	add	r7, r0
 8001976:	1a36      	subs	r6, r6, r0
 8001978:	e7ea      	b.n	8001950 <__sflush_r+0xd4>
 800197a:	bf00      	nop
 800197c:	20400001 	.word	0x20400001

08001980 <_fflush_r>:
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	690b      	ldr	r3, [r1, #16]
 8001984:	4605      	mov	r5, r0
 8001986:	460c      	mov	r4, r1
 8001988:	b913      	cbnz	r3, 8001990 <_fflush_r+0x10>
 800198a:	2500      	movs	r5, #0
 800198c:	4628      	mov	r0, r5
 800198e:	bd38      	pop	{r3, r4, r5, pc}
 8001990:	b118      	cbz	r0, 800199a <_fflush_r+0x1a>
 8001992:	6983      	ldr	r3, [r0, #24]
 8001994:	b90b      	cbnz	r3, 800199a <_fflush_r+0x1a>
 8001996:	f000 f887 	bl	8001aa8 <__sinit>
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <_fflush_r+0x6c>)
 800199c:	429c      	cmp	r4, r3
 800199e:	d11b      	bne.n	80019d8 <_fflush_r+0x58>
 80019a0:	686c      	ldr	r4, [r5, #4]
 80019a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ef      	beq.n	800198a <_fflush_r+0xa>
 80019aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80019ac:	07d0      	lsls	r0, r2, #31
 80019ae:	d404      	bmi.n	80019ba <_fflush_r+0x3a>
 80019b0:	0599      	lsls	r1, r3, #22
 80019b2:	d402      	bmi.n	80019ba <_fflush_r+0x3a>
 80019b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019b6:	f000 f915 	bl	8001be4 <__retarget_lock_acquire_recursive>
 80019ba:	4628      	mov	r0, r5
 80019bc:	4621      	mov	r1, r4
 80019be:	f7ff ff5d 	bl	800187c <__sflush_r>
 80019c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019c4:	07da      	lsls	r2, r3, #31
 80019c6:	4605      	mov	r5, r0
 80019c8:	d4e0      	bmi.n	800198c <_fflush_r+0xc>
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	059b      	lsls	r3, r3, #22
 80019ce:	d4dd      	bmi.n	800198c <_fflush_r+0xc>
 80019d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019d2:	f000 f908 	bl	8001be6 <__retarget_lock_release_recursive>
 80019d6:	e7d9      	b.n	800198c <_fflush_r+0xc>
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <_fflush_r+0x70>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	d101      	bne.n	80019e2 <_fflush_r+0x62>
 80019de:	68ac      	ldr	r4, [r5, #8]
 80019e0:	e7df      	b.n	80019a2 <_fflush_r+0x22>
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <_fflush_r+0x74>)
 80019e4:	429c      	cmp	r4, r3
 80019e6:	bf08      	it	eq
 80019e8:	68ec      	ldreq	r4, [r5, #12]
 80019ea:	e7da      	b.n	80019a2 <_fflush_r+0x22>
 80019ec:	08002ca8 	.word	0x08002ca8
 80019f0:	08002cc8 	.word	0x08002cc8
 80019f4:	08002c88 	.word	0x08002c88

080019f8 <std>:
 80019f8:	2300      	movs	r3, #0
 80019fa:	b510      	push	{r4, lr}
 80019fc:	4604      	mov	r4, r0
 80019fe:	e9c0 3300 	strd	r3, r3, [r0]
 8001a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a06:	6083      	str	r3, [r0, #8]
 8001a08:	8181      	strh	r1, [r0, #12]
 8001a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001a0c:	81c2      	strh	r2, [r0, #14]
 8001a0e:	6183      	str	r3, [r0, #24]
 8001a10:	4619      	mov	r1, r3
 8001a12:	2208      	movs	r2, #8
 8001a14:	305c      	adds	r0, #92	; 0x5c
 8001a16:	f7ff fddb 	bl	80015d0 <memset>
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <std+0x38>)
 8001a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <std+0x3c>)
 8001a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <std+0x40>)
 8001a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <std+0x44>)
 8001a28:	6224      	str	r4, [r4, #32]
 8001a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001a2c:	bd10      	pop	{r4, pc}
 8001a2e:	bf00      	nop
 8001a30:	08002469 	.word	0x08002469
 8001a34:	0800248b 	.word	0x0800248b
 8001a38:	080024c3 	.word	0x080024c3
 8001a3c:	080024e7 	.word	0x080024e7

08001a40 <_cleanup_r>:
 8001a40:	4901      	ldr	r1, [pc, #4]	; (8001a48 <_cleanup_r+0x8>)
 8001a42:	f000 b8af 	b.w	8001ba4 <_fwalk_reent>
 8001a46:	bf00      	nop
 8001a48:	08001981 	.word	0x08001981

08001a4c <__sfmoreglue>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	2268      	movs	r2, #104	; 0x68
 8001a50:	1e4d      	subs	r5, r1, #1
 8001a52:	4355      	muls	r5, r2
 8001a54:	460e      	mov	r6, r1
 8001a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a5a:	f000 f995 	bl	8001d88 <_malloc_r>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	b140      	cbz	r0, 8001a74 <__sfmoreglue+0x28>
 8001a62:	2100      	movs	r1, #0
 8001a64:	e9c0 1600 	strd	r1, r6, [r0]
 8001a68:	300c      	adds	r0, #12
 8001a6a:	60a0      	str	r0, [r4, #8]
 8001a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a70:	f7ff fdae 	bl	80015d0 <memset>
 8001a74:	4620      	mov	r0, r4
 8001a76:	bd70      	pop	{r4, r5, r6, pc}

08001a78 <__sfp_lock_acquire>:
 8001a78:	4801      	ldr	r0, [pc, #4]	; (8001a80 <__sfp_lock_acquire+0x8>)
 8001a7a:	f000 b8b3 	b.w	8001be4 <__retarget_lock_acquire_recursive>
 8001a7e:	bf00      	nop
 8001a80:	200000e1 	.word	0x200000e1

08001a84 <__sfp_lock_release>:
 8001a84:	4801      	ldr	r0, [pc, #4]	; (8001a8c <__sfp_lock_release+0x8>)
 8001a86:	f000 b8ae 	b.w	8001be6 <__retarget_lock_release_recursive>
 8001a8a:	bf00      	nop
 8001a8c:	200000e1 	.word	0x200000e1

08001a90 <__sinit_lock_acquire>:
 8001a90:	4801      	ldr	r0, [pc, #4]	; (8001a98 <__sinit_lock_acquire+0x8>)
 8001a92:	f000 b8a7 	b.w	8001be4 <__retarget_lock_acquire_recursive>
 8001a96:	bf00      	nop
 8001a98:	200000e2 	.word	0x200000e2

08001a9c <__sinit_lock_release>:
 8001a9c:	4801      	ldr	r0, [pc, #4]	; (8001aa4 <__sinit_lock_release+0x8>)
 8001a9e:	f000 b8a2 	b.w	8001be6 <__retarget_lock_release_recursive>
 8001aa2:	bf00      	nop
 8001aa4:	200000e2 	.word	0x200000e2

08001aa8 <__sinit>:
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	4604      	mov	r4, r0
 8001aac:	f7ff fff0 	bl	8001a90 <__sinit_lock_acquire>
 8001ab0:	69a3      	ldr	r3, [r4, #24]
 8001ab2:	b11b      	cbz	r3, 8001abc <__sinit+0x14>
 8001ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ab8:	f7ff bff0 	b.w	8001a9c <__sinit_lock_release>
 8001abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <__sinit+0x68>)
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <__sinit+0x6c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001aca:	42a3      	cmp	r3, r4
 8001acc:	bf04      	itt	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	61a3      	streq	r3, [r4, #24]
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f000 f820 	bl	8001b18 <__sfp>
 8001ad8:	6060      	str	r0, [r4, #4]
 8001ada:	4620      	mov	r0, r4
 8001adc:	f000 f81c 	bl	8001b18 <__sfp>
 8001ae0:	60a0      	str	r0, [r4, #8]
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f000 f818 	bl	8001b18 <__sfp>
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60e0      	str	r0, [r4, #12]
 8001aec:	2104      	movs	r1, #4
 8001aee:	6860      	ldr	r0, [r4, #4]
 8001af0:	f7ff ff82 	bl	80019f8 <std>
 8001af4:	68a0      	ldr	r0, [r4, #8]
 8001af6:	2201      	movs	r2, #1
 8001af8:	2109      	movs	r1, #9
 8001afa:	f7ff ff7d 	bl	80019f8 <std>
 8001afe:	68e0      	ldr	r0, [r4, #12]
 8001b00:	2202      	movs	r2, #2
 8001b02:	2112      	movs	r1, #18
 8001b04:	f7ff ff78 	bl	80019f8 <std>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61a3      	str	r3, [r4, #24]
 8001b0c:	e7d2      	b.n	8001ab4 <__sinit+0xc>
 8001b0e:	bf00      	nop
 8001b10:	08002c84 	.word	0x08002c84
 8001b14:	08001a41 	.word	0x08001a41

08001b18 <__sfp>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	4607      	mov	r7, r0
 8001b1c:	f7ff ffac 	bl	8001a78 <__sfp_lock_acquire>
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <__sfp+0x84>)
 8001b22:	681e      	ldr	r6, [r3, #0]
 8001b24:	69b3      	ldr	r3, [r6, #24]
 8001b26:	b913      	cbnz	r3, 8001b2e <__sfp+0x16>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f7ff ffbd 	bl	8001aa8 <__sinit>
 8001b2e:	3648      	adds	r6, #72	; 0x48
 8001b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	d503      	bpl.n	8001b40 <__sfp+0x28>
 8001b38:	6833      	ldr	r3, [r6, #0]
 8001b3a:	b30b      	cbz	r3, 8001b80 <__sfp+0x68>
 8001b3c:	6836      	ldr	r6, [r6, #0]
 8001b3e:	e7f7      	b.n	8001b30 <__sfp+0x18>
 8001b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b44:	b9d5      	cbnz	r5, 8001b7c <__sfp+0x64>
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <__sfp+0x88>)
 8001b48:	60e3      	str	r3, [r4, #12]
 8001b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8001b50:	f000 f847 	bl	8001be2 <__retarget_lock_init_recursive>
 8001b54:	f7ff ff96 	bl	8001a84 <__sfp_lock_release>
 8001b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001b60:	6025      	str	r5, [r4, #0]
 8001b62:	61a5      	str	r5, [r4, #24]
 8001b64:	2208      	movs	r2, #8
 8001b66:	4629      	mov	r1, r5
 8001b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b6c:	f7ff fd30 	bl	80015d0 <memset>
 8001b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b78:	4620      	mov	r0, r4
 8001b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b7c:	3468      	adds	r4, #104	; 0x68
 8001b7e:	e7d9      	b.n	8001b34 <__sfp+0x1c>
 8001b80:	2104      	movs	r1, #4
 8001b82:	4638      	mov	r0, r7
 8001b84:	f7ff ff62 	bl	8001a4c <__sfmoreglue>
 8001b88:	4604      	mov	r4, r0
 8001b8a:	6030      	str	r0, [r6, #0]
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d1d5      	bne.n	8001b3c <__sfp+0x24>
 8001b90:	f7ff ff78 	bl	8001a84 <__sfp_lock_release>
 8001b94:	230c      	movs	r3, #12
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	e7ee      	b.n	8001b78 <__sfp+0x60>
 8001b9a:	bf00      	nop
 8001b9c:	08002c84 	.word	0x08002c84
 8001ba0:	ffff0001 	.word	0xffff0001

08001ba4 <_fwalk_reent>:
 8001ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba8:	4606      	mov	r6, r0
 8001baa:	4688      	mov	r8, r1
 8001bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001bb0:	2700      	movs	r7, #0
 8001bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8001bba:	d505      	bpl.n	8001bc8 <_fwalk_reent+0x24>
 8001bbc:	6824      	ldr	r4, [r4, #0]
 8001bbe:	2c00      	cmp	r4, #0
 8001bc0:	d1f7      	bne.n	8001bb2 <_fwalk_reent+0xe>
 8001bc2:	4638      	mov	r0, r7
 8001bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bc8:	89ab      	ldrh	r3, [r5, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d907      	bls.n	8001bde <_fwalk_reent+0x3a>
 8001bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	d003      	beq.n	8001bde <_fwalk_reent+0x3a>
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	4630      	mov	r0, r6
 8001bda:	47c0      	blx	r8
 8001bdc:	4307      	orrs	r7, r0
 8001bde:	3568      	adds	r5, #104	; 0x68
 8001be0:	e7e9      	b.n	8001bb6 <_fwalk_reent+0x12>

08001be2 <__retarget_lock_init_recursive>:
 8001be2:	4770      	bx	lr

08001be4 <__retarget_lock_acquire_recursive>:
 8001be4:	4770      	bx	lr

08001be6 <__retarget_lock_release_recursive>:
 8001be6:	4770      	bx	lr

08001be8 <__swhatbuf_r>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	460e      	mov	r6, r1
 8001bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	b096      	sub	sp, #88	; 0x58
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	da08      	bge.n	8001c0c <__swhatbuf_r+0x24>
 8001bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	602a      	str	r2, [r5, #0]
 8001c02:	061a      	lsls	r2, r3, #24
 8001c04:	d410      	bmi.n	8001c28 <__swhatbuf_r+0x40>
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	e00e      	b.n	8001c2a <__swhatbuf_r+0x42>
 8001c0c:	466a      	mov	r2, sp
 8001c0e:	f000 fc91 	bl	8002534 <_fstat_r>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	dbf1      	blt.n	8001bfa <__swhatbuf_r+0x12>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c20:	425a      	negs	r2, r3
 8001c22:	415a      	adcs	r2, r3
 8001c24:	602a      	str	r2, [r5, #0]
 8001c26:	e7ee      	b.n	8001c06 <__swhatbuf_r+0x1e>
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	b016      	add	sp, #88	; 0x58
 8001c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c34 <__smakebuf_r>:
 8001c34:	898b      	ldrh	r3, [r1, #12]
 8001c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c38:	079d      	lsls	r5, r3, #30
 8001c3a:	4606      	mov	r6, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	d507      	bpl.n	8001c50 <__smakebuf_r+0x1c>
 8001c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	6123      	str	r3, [r4, #16]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	6163      	str	r3, [r4, #20]
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	ab01      	add	r3, sp, #4
 8001c52:	466a      	mov	r2, sp
 8001c54:	f7ff ffc8 	bl	8001be8 <__swhatbuf_r>
 8001c58:	9900      	ldr	r1, [sp, #0]
 8001c5a:	4605      	mov	r5, r0
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f000 f893 	bl	8001d88 <_malloc_r>
 8001c62:	b948      	cbnz	r0, 8001c78 <__smakebuf_r+0x44>
 8001c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c68:	059a      	lsls	r2, r3, #22
 8001c6a:	d4ef      	bmi.n	8001c4c <__smakebuf_r+0x18>
 8001c6c:	f023 0303 	bic.w	r3, r3, #3
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	81a3      	strh	r3, [r4, #12]
 8001c76:	e7e3      	b.n	8001c40 <__smakebuf_r+0xc>
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <__smakebuf_r+0x7c>)
 8001c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	6020      	str	r0, [r4, #0]
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	81a3      	strh	r3, [r4, #12]
 8001c86:	9b00      	ldr	r3, [sp, #0]
 8001c88:	6163      	str	r3, [r4, #20]
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	6120      	str	r0, [r4, #16]
 8001c8e:	b15b      	cbz	r3, 8001ca8 <__smakebuf_r+0x74>
 8001c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c94:	4630      	mov	r0, r6
 8001c96:	f000 fc5f 	bl	8002558 <_isatty_r>
 8001c9a:	b128      	cbz	r0, 8001ca8 <__smakebuf_r+0x74>
 8001c9c:	89a3      	ldrh	r3, [r4, #12]
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	81a3      	strh	r3, [r4, #12]
 8001ca8:	89a0      	ldrh	r0, [r4, #12]
 8001caa:	4305      	orrs	r5, r0
 8001cac:	81a5      	strh	r5, [r4, #12]
 8001cae:	e7cd      	b.n	8001c4c <__smakebuf_r+0x18>
 8001cb0:	08001a41 	.word	0x08001a41

08001cb4 <_free_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	2900      	cmp	r1, #0
 8001cba:	d041      	beq.n	8001d40 <_free_r+0x8c>
 8001cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cc0:	1f0c      	subs	r4, r1, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bfb8      	it	lt
 8001cc6:	18e4      	addlt	r4, r4, r3
 8001cc8:	f000 fc68 	bl	800259c <__malloc_lock>
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <_free_r+0x90>)
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	b933      	cbnz	r3, 8001ce0 <_free_r+0x2c>
 8001cd2:	6063      	str	r3, [r4, #4]
 8001cd4:	6014      	str	r4, [r2, #0]
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cdc:	f000 bc64 	b.w	80025a8 <__malloc_unlock>
 8001ce0:	42a3      	cmp	r3, r4
 8001ce2:	d908      	bls.n	8001cf6 <_free_r+0x42>
 8001ce4:	6820      	ldr	r0, [r4, #0]
 8001ce6:	1821      	adds	r1, r4, r0
 8001ce8:	428b      	cmp	r3, r1
 8001cea:	bf01      	itttt	eq
 8001cec:	6819      	ldreq	r1, [r3, #0]
 8001cee:	685b      	ldreq	r3, [r3, #4]
 8001cf0:	1809      	addeq	r1, r1, r0
 8001cf2:	6021      	streq	r1, [r4, #0]
 8001cf4:	e7ed      	b.n	8001cd2 <_free_r+0x1e>
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	b10b      	cbz	r3, 8001d00 <_free_r+0x4c>
 8001cfc:	42a3      	cmp	r3, r4
 8001cfe:	d9fa      	bls.n	8001cf6 <_free_r+0x42>
 8001d00:	6811      	ldr	r1, [r2, #0]
 8001d02:	1850      	adds	r0, r2, r1
 8001d04:	42a0      	cmp	r0, r4
 8001d06:	d10b      	bne.n	8001d20 <_free_r+0x6c>
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	4401      	add	r1, r0
 8001d0c:	1850      	adds	r0, r2, r1
 8001d0e:	4283      	cmp	r3, r0
 8001d10:	6011      	str	r1, [r2, #0]
 8001d12:	d1e0      	bne.n	8001cd6 <_free_r+0x22>
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	6053      	str	r3, [r2, #4]
 8001d1a:	4401      	add	r1, r0
 8001d1c:	6011      	str	r1, [r2, #0]
 8001d1e:	e7da      	b.n	8001cd6 <_free_r+0x22>
 8001d20:	d902      	bls.n	8001d28 <_free_r+0x74>
 8001d22:	230c      	movs	r3, #12
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	e7d6      	b.n	8001cd6 <_free_r+0x22>
 8001d28:	6820      	ldr	r0, [r4, #0]
 8001d2a:	1821      	adds	r1, r4, r0
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	bf04      	itt	eq
 8001d30:	6819      	ldreq	r1, [r3, #0]
 8001d32:	685b      	ldreq	r3, [r3, #4]
 8001d34:	6063      	str	r3, [r4, #4]
 8001d36:	bf04      	itt	eq
 8001d38:	1809      	addeq	r1, r1, r0
 8001d3a:	6021      	streq	r1, [r4, #0]
 8001d3c:	6054      	str	r4, [r2, #4]
 8001d3e:	e7ca      	b.n	8001cd6 <_free_r+0x22>
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
 8001d42:	bf00      	nop
 8001d44:	200000e4 	.word	0x200000e4

08001d48 <sbrk_aligned>:
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	4e0e      	ldr	r6, [pc, #56]	; (8001d84 <sbrk_aligned+0x3c>)
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	6831      	ldr	r1, [r6, #0]
 8001d50:	4605      	mov	r5, r0
 8001d52:	b911      	cbnz	r1, 8001d5a <sbrk_aligned+0x12>
 8001d54:	f000 fb78 	bl	8002448 <_sbrk_r>
 8001d58:	6030      	str	r0, [r6, #0]
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f000 fb73 	bl	8002448 <_sbrk_r>
 8001d62:	1c43      	adds	r3, r0, #1
 8001d64:	d00a      	beq.n	8001d7c <sbrk_aligned+0x34>
 8001d66:	1cc4      	adds	r4, r0, #3
 8001d68:	f024 0403 	bic.w	r4, r4, #3
 8001d6c:	42a0      	cmp	r0, r4
 8001d6e:	d007      	beq.n	8001d80 <sbrk_aligned+0x38>
 8001d70:	1a21      	subs	r1, r4, r0
 8001d72:	4628      	mov	r0, r5
 8001d74:	f000 fb68 	bl	8002448 <_sbrk_r>
 8001d78:	3001      	adds	r0, #1
 8001d7a:	d101      	bne.n	8001d80 <sbrk_aligned+0x38>
 8001d7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001d80:	4620      	mov	r0, r4
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	200000e8 	.word	0x200000e8

08001d88 <_malloc_r>:
 8001d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8c:	1ccd      	adds	r5, r1, #3
 8001d8e:	f025 0503 	bic.w	r5, r5, #3
 8001d92:	3508      	adds	r5, #8
 8001d94:	2d0c      	cmp	r5, #12
 8001d96:	bf38      	it	cc
 8001d98:	250c      	movcc	r5, #12
 8001d9a:	2d00      	cmp	r5, #0
 8001d9c:	4607      	mov	r7, r0
 8001d9e:	db01      	blt.n	8001da4 <_malloc_r+0x1c>
 8001da0:	42a9      	cmp	r1, r5
 8001da2:	d905      	bls.n	8001db0 <_malloc_r+0x28>
 8001da4:	230c      	movs	r3, #12
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	2600      	movs	r6, #0
 8001daa:	4630      	mov	r0, r6
 8001dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001db0:	4e2e      	ldr	r6, [pc, #184]	; (8001e6c <_malloc_r+0xe4>)
 8001db2:	f000 fbf3 	bl	800259c <__malloc_lock>
 8001db6:	6833      	ldr	r3, [r6, #0]
 8001db8:	461c      	mov	r4, r3
 8001dba:	bb34      	cbnz	r4, 8001e0a <_malloc_r+0x82>
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4638      	mov	r0, r7
 8001dc0:	f7ff ffc2 	bl	8001d48 <sbrk_aligned>
 8001dc4:	1c43      	adds	r3, r0, #1
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	d14d      	bne.n	8001e66 <_malloc_r+0xde>
 8001dca:	6834      	ldr	r4, [r6, #0]
 8001dcc:	4626      	mov	r6, r4
 8001dce:	2e00      	cmp	r6, #0
 8001dd0:	d140      	bne.n	8001e54 <_malloc_r+0xcc>
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	4631      	mov	r1, r6
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	eb04 0803 	add.w	r8, r4, r3
 8001ddc:	f000 fb34 	bl	8002448 <_sbrk_r>
 8001de0:	4580      	cmp	r8, r0
 8001de2:	d13a      	bne.n	8001e5a <_malloc_r+0xd2>
 8001de4:	6821      	ldr	r1, [r4, #0]
 8001de6:	3503      	adds	r5, #3
 8001de8:	1a6d      	subs	r5, r5, r1
 8001dea:	f025 0503 	bic.w	r5, r5, #3
 8001dee:	3508      	adds	r5, #8
 8001df0:	2d0c      	cmp	r5, #12
 8001df2:	bf38      	it	cc
 8001df4:	250c      	movcc	r5, #12
 8001df6:	4629      	mov	r1, r5
 8001df8:	4638      	mov	r0, r7
 8001dfa:	f7ff ffa5 	bl	8001d48 <sbrk_aligned>
 8001dfe:	3001      	adds	r0, #1
 8001e00:	d02b      	beq.n	8001e5a <_malloc_r+0xd2>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	442b      	add	r3, r5
 8001e06:	6023      	str	r3, [r4, #0]
 8001e08:	e00e      	b.n	8001e28 <_malloc_r+0xa0>
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	1b52      	subs	r2, r2, r5
 8001e0e:	d41e      	bmi.n	8001e4e <_malloc_r+0xc6>
 8001e10:	2a0b      	cmp	r2, #11
 8001e12:	d916      	bls.n	8001e42 <_malloc_r+0xba>
 8001e14:	1961      	adds	r1, r4, r5
 8001e16:	42a3      	cmp	r3, r4
 8001e18:	6025      	str	r5, [r4, #0]
 8001e1a:	bf18      	it	ne
 8001e1c:	6059      	strne	r1, [r3, #4]
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	bf08      	it	eq
 8001e22:	6031      	streq	r1, [r6, #0]
 8001e24:	5162      	str	r2, [r4, r5]
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	4638      	mov	r0, r7
 8001e2a:	f104 060b 	add.w	r6, r4, #11
 8001e2e:	f000 fbbb 	bl	80025a8 <__malloc_unlock>
 8001e32:	f026 0607 	bic.w	r6, r6, #7
 8001e36:	1d23      	adds	r3, r4, #4
 8001e38:	1af2      	subs	r2, r6, r3
 8001e3a:	d0b6      	beq.n	8001daa <_malloc_r+0x22>
 8001e3c:	1b9b      	subs	r3, r3, r6
 8001e3e:	50a3      	str	r3, [r4, r2]
 8001e40:	e7b3      	b.n	8001daa <_malloc_r+0x22>
 8001e42:	6862      	ldr	r2, [r4, #4]
 8001e44:	42a3      	cmp	r3, r4
 8001e46:	bf0c      	ite	eq
 8001e48:	6032      	streq	r2, [r6, #0]
 8001e4a:	605a      	strne	r2, [r3, #4]
 8001e4c:	e7ec      	b.n	8001e28 <_malloc_r+0xa0>
 8001e4e:	4623      	mov	r3, r4
 8001e50:	6864      	ldr	r4, [r4, #4]
 8001e52:	e7b2      	b.n	8001dba <_malloc_r+0x32>
 8001e54:	4634      	mov	r4, r6
 8001e56:	6876      	ldr	r6, [r6, #4]
 8001e58:	e7b9      	b.n	8001dce <_malloc_r+0x46>
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4638      	mov	r0, r7
 8001e60:	f000 fba2 	bl	80025a8 <__malloc_unlock>
 8001e64:	e7a1      	b.n	8001daa <_malloc_r+0x22>
 8001e66:	6025      	str	r5, [r4, #0]
 8001e68:	e7de      	b.n	8001e28 <_malloc_r+0xa0>
 8001e6a:	bf00      	nop
 8001e6c:	200000e4 	.word	0x200000e4

08001e70 <__sfputc_r>:
 8001e70:	6893      	ldr	r3, [r2, #8]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	b410      	push	{r4}
 8001e78:	6093      	str	r3, [r2, #8]
 8001e7a:	da07      	bge.n	8001e8c <__sfputc_r+0x1c>
 8001e7c:	6994      	ldr	r4, [r2, #24]
 8001e7e:	42a3      	cmp	r3, r4
 8001e80:	db01      	blt.n	8001e86 <__sfputc_r+0x16>
 8001e82:	290a      	cmp	r1, #10
 8001e84:	d102      	bne.n	8001e8c <__sfputc_r+0x1c>
 8001e86:	bc10      	pop	{r4}
 8001e88:	f7ff bc38 	b.w	80016fc <__swbuf_r>
 8001e8c:	6813      	ldr	r3, [r2, #0]
 8001e8e:	1c58      	adds	r0, r3, #1
 8001e90:	6010      	str	r0, [r2, #0]
 8001e92:	7019      	strb	r1, [r3, #0]
 8001e94:	4608      	mov	r0, r1
 8001e96:	bc10      	pop	{r4}
 8001e98:	4770      	bx	lr

08001e9a <__sfputs_r>:
 8001e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	460f      	mov	r7, r1
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	18d5      	adds	r5, r2, r3
 8001ea4:	42ac      	cmp	r4, r5
 8001ea6:	d101      	bne.n	8001eac <__sfputs_r+0x12>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	e007      	b.n	8001ebc <__sfputs_r+0x22>
 8001eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eb0:	463a      	mov	r2, r7
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f7ff ffdc 	bl	8001e70 <__sfputc_r>
 8001eb8:	1c43      	adds	r3, r0, #1
 8001eba:	d1f3      	bne.n	8001ea4 <__sfputs_r+0xa>
 8001ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ec0 <_vfiprintf_r>:
 8001ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec4:	460d      	mov	r5, r1
 8001ec6:	b09d      	sub	sp, #116	; 0x74
 8001ec8:	4614      	mov	r4, r2
 8001eca:	4698      	mov	r8, r3
 8001ecc:	4606      	mov	r6, r0
 8001ece:	b118      	cbz	r0, 8001ed8 <_vfiprintf_r+0x18>
 8001ed0:	6983      	ldr	r3, [r0, #24]
 8001ed2:	b90b      	cbnz	r3, 8001ed8 <_vfiprintf_r+0x18>
 8001ed4:	f7ff fde8 	bl	8001aa8 <__sinit>
 8001ed8:	4b89      	ldr	r3, [pc, #548]	; (8002100 <_vfiprintf_r+0x240>)
 8001eda:	429d      	cmp	r5, r3
 8001edc:	d11b      	bne.n	8001f16 <_vfiprintf_r+0x56>
 8001ede:	6875      	ldr	r5, [r6, #4]
 8001ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ee2:	07d9      	lsls	r1, r3, #31
 8001ee4:	d405      	bmi.n	8001ef2 <_vfiprintf_r+0x32>
 8001ee6:	89ab      	ldrh	r3, [r5, #12]
 8001ee8:	059a      	lsls	r2, r3, #22
 8001eea:	d402      	bmi.n	8001ef2 <_vfiprintf_r+0x32>
 8001eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001eee:	f7ff fe79 	bl	8001be4 <__retarget_lock_acquire_recursive>
 8001ef2:	89ab      	ldrh	r3, [r5, #12]
 8001ef4:	071b      	lsls	r3, r3, #28
 8001ef6:	d501      	bpl.n	8001efc <_vfiprintf_r+0x3c>
 8001ef8:	692b      	ldr	r3, [r5, #16]
 8001efa:	b9eb      	cbnz	r3, 8001f38 <_vfiprintf_r+0x78>
 8001efc:	4629      	mov	r1, r5
 8001efe:	4630      	mov	r0, r6
 8001f00:	f7ff fc4e 	bl	80017a0 <__swsetup_r>
 8001f04:	b1c0      	cbz	r0, 8001f38 <_vfiprintf_r+0x78>
 8001f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f08:	07dc      	lsls	r4, r3, #31
 8001f0a:	d50e      	bpl.n	8001f2a <_vfiprintf_r+0x6a>
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f10:	b01d      	add	sp, #116	; 0x74
 8001f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f16:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <_vfiprintf_r+0x244>)
 8001f18:	429d      	cmp	r5, r3
 8001f1a:	d101      	bne.n	8001f20 <_vfiprintf_r+0x60>
 8001f1c:	68b5      	ldr	r5, [r6, #8]
 8001f1e:	e7df      	b.n	8001ee0 <_vfiprintf_r+0x20>
 8001f20:	4b79      	ldr	r3, [pc, #484]	; (8002108 <_vfiprintf_r+0x248>)
 8001f22:	429d      	cmp	r5, r3
 8001f24:	bf08      	it	eq
 8001f26:	68f5      	ldreq	r5, [r6, #12]
 8001f28:	e7da      	b.n	8001ee0 <_vfiprintf_r+0x20>
 8001f2a:	89ab      	ldrh	r3, [r5, #12]
 8001f2c:	0598      	lsls	r0, r3, #22
 8001f2e:	d4ed      	bmi.n	8001f0c <_vfiprintf_r+0x4c>
 8001f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f32:	f7ff fe58 	bl	8001be6 <__retarget_lock_release_recursive>
 8001f36:	e7e9      	b.n	8001f0c <_vfiprintf_r+0x4c>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f46:	2330      	movs	r3, #48	; 0x30
 8001f48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800210c <_vfiprintf_r+0x24c>
 8001f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f50:	f04f 0901 	mov.w	r9, #1
 8001f54:	4623      	mov	r3, r4
 8001f56:	469a      	mov	sl, r3
 8001f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f5c:	b10a      	cbz	r2, 8001f62 <_vfiprintf_r+0xa2>
 8001f5e:	2a25      	cmp	r2, #37	; 0x25
 8001f60:	d1f9      	bne.n	8001f56 <_vfiprintf_r+0x96>
 8001f62:	ebba 0b04 	subs.w	fp, sl, r4
 8001f66:	d00b      	beq.n	8001f80 <_vfiprintf_r+0xc0>
 8001f68:	465b      	mov	r3, fp
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4630      	mov	r0, r6
 8001f70:	f7ff ff93 	bl	8001e9a <__sfputs_r>
 8001f74:	3001      	adds	r0, #1
 8001f76:	f000 80aa 	beq.w	80020ce <_vfiprintf_r+0x20e>
 8001f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f7c:	445a      	add	r2, fp
 8001f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f80:	f89a 3000 	ldrb.w	r3, [sl]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a2 	beq.w	80020ce <_vfiprintf_r+0x20e>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f94:	f10a 0a01 	add.w	sl, sl, #1
 8001f98:	9304      	str	r3, [sp, #16]
 8001f9a:	9307      	str	r3, [sp, #28]
 8001f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8001fa2:	4654      	mov	r4, sl
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001faa:	4858      	ldr	r0, [pc, #352]	; (800210c <_vfiprintf_r+0x24c>)
 8001fac:	f7fe f920 	bl	80001f0 <memchr>
 8001fb0:	9a04      	ldr	r2, [sp, #16]
 8001fb2:	b9d8      	cbnz	r0, 8001fec <_vfiprintf_r+0x12c>
 8001fb4:	06d1      	lsls	r1, r2, #27
 8001fb6:	bf44      	itt	mi
 8001fb8:	2320      	movmi	r3, #32
 8001fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fbe:	0713      	lsls	r3, r2, #28
 8001fc0:	bf44      	itt	mi
 8001fc2:	232b      	movmi	r3, #43	; 0x2b
 8001fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8001fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8001fce:	d015      	beq.n	8001ffc <_vfiprintf_r+0x13c>
 8001fd0:	9a07      	ldr	r2, [sp, #28]
 8001fd2:	4654      	mov	r4, sl
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f04f 0c0a 	mov.w	ip, #10
 8001fda:	4621      	mov	r1, r4
 8001fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fe0:	3b30      	subs	r3, #48	; 0x30
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d94e      	bls.n	8002084 <_vfiprintf_r+0x1c4>
 8001fe6:	b1b0      	cbz	r0, 8002016 <_vfiprintf_r+0x156>
 8001fe8:	9207      	str	r2, [sp, #28]
 8001fea:	e014      	b.n	8002016 <_vfiprintf_r+0x156>
 8001fec:	eba0 0308 	sub.w	r3, r0, r8
 8001ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	9304      	str	r3, [sp, #16]
 8001ff8:	46a2      	mov	sl, r4
 8001ffa:	e7d2      	b.n	8001fa2 <_vfiprintf_r+0xe2>
 8001ffc:	9b03      	ldr	r3, [sp, #12]
 8001ffe:	1d19      	adds	r1, r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	9103      	str	r1, [sp, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	bfbb      	ittet	lt
 8002008:	425b      	neglt	r3, r3
 800200a:	f042 0202 	orrlt.w	r2, r2, #2
 800200e:	9307      	strge	r3, [sp, #28]
 8002010:	9307      	strlt	r3, [sp, #28]
 8002012:	bfb8      	it	lt
 8002014:	9204      	strlt	r2, [sp, #16]
 8002016:	7823      	ldrb	r3, [r4, #0]
 8002018:	2b2e      	cmp	r3, #46	; 0x2e
 800201a:	d10c      	bne.n	8002036 <_vfiprintf_r+0x176>
 800201c:	7863      	ldrb	r3, [r4, #1]
 800201e:	2b2a      	cmp	r3, #42	; 0x2a
 8002020:	d135      	bne.n	800208e <_vfiprintf_r+0x1ce>
 8002022:	9b03      	ldr	r3, [sp, #12]
 8002024:	1d1a      	adds	r2, r3, #4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	9203      	str	r2, [sp, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	bfb8      	it	lt
 800202e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002032:	3402      	adds	r4, #2
 8002034:	9305      	str	r3, [sp, #20]
 8002036:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002110 <_vfiprintf_r+0x250>
 800203a:	7821      	ldrb	r1, [r4, #0]
 800203c:	2203      	movs	r2, #3
 800203e:	4650      	mov	r0, sl
 8002040:	f7fe f8d6 	bl	80001f0 <memchr>
 8002044:	b140      	cbz	r0, 8002058 <_vfiprintf_r+0x198>
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	eba0 000a 	sub.w	r0, r0, sl
 800204c:	fa03 f000 	lsl.w	r0, r3, r0
 8002050:	9b04      	ldr	r3, [sp, #16]
 8002052:	4303      	orrs	r3, r0
 8002054:	3401      	adds	r4, #1
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800205c:	482d      	ldr	r0, [pc, #180]	; (8002114 <_vfiprintf_r+0x254>)
 800205e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002062:	2206      	movs	r2, #6
 8002064:	f7fe f8c4 	bl	80001f0 <memchr>
 8002068:	2800      	cmp	r0, #0
 800206a:	d03f      	beq.n	80020ec <_vfiprintf_r+0x22c>
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <_vfiprintf_r+0x258>)
 800206e:	bb1b      	cbnz	r3, 80020b8 <_vfiprintf_r+0x1f8>
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	3307      	adds	r3, #7
 8002074:	f023 0307 	bic.w	r3, r3, #7
 8002078:	3308      	adds	r3, #8
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800207e:	443b      	add	r3, r7
 8002080:	9309      	str	r3, [sp, #36]	; 0x24
 8002082:	e767      	b.n	8001f54 <_vfiprintf_r+0x94>
 8002084:	fb0c 3202 	mla	r2, ip, r2, r3
 8002088:	460c      	mov	r4, r1
 800208a:	2001      	movs	r0, #1
 800208c:	e7a5      	b.n	8001fda <_vfiprintf_r+0x11a>
 800208e:	2300      	movs	r3, #0
 8002090:	3401      	adds	r4, #1
 8002092:	9305      	str	r3, [sp, #20]
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 0c0a 	mov.w	ip, #10
 800209a:	4620      	mov	r0, r4
 800209c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020a0:	3a30      	subs	r2, #48	; 0x30
 80020a2:	2a09      	cmp	r2, #9
 80020a4:	d903      	bls.n	80020ae <_vfiprintf_r+0x1ee>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0c5      	beq.n	8002036 <_vfiprintf_r+0x176>
 80020aa:	9105      	str	r1, [sp, #20]
 80020ac:	e7c3      	b.n	8002036 <_vfiprintf_r+0x176>
 80020ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80020b2:	4604      	mov	r4, r0
 80020b4:	2301      	movs	r3, #1
 80020b6:	e7f0      	b.n	800209a <_vfiprintf_r+0x1da>
 80020b8:	ab03      	add	r3, sp, #12
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	462a      	mov	r2, r5
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <_vfiprintf_r+0x25c>)
 80020c0:	a904      	add	r1, sp, #16
 80020c2:	4630      	mov	r0, r6
 80020c4:	f3af 8000 	nop.w
 80020c8:	4607      	mov	r7, r0
 80020ca:	1c78      	adds	r0, r7, #1
 80020cc:	d1d6      	bne.n	800207c <_vfiprintf_r+0x1bc>
 80020ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020d0:	07d9      	lsls	r1, r3, #31
 80020d2:	d405      	bmi.n	80020e0 <_vfiprintf_r+0x220>
 80020d4:	89ab      	ldrh	r3, [r5, #12]
 80020d6:	059a      	lsls	r2, r3, #22
 80020d8:	d402      	bmi.n	80020e0 <_vfiprintf_r+0x220>
 80020da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020dc:	f7ff fd83 	bl	8001be6 <__retarget_lock_release_recursive>
 80020e0:	89ab      	ldrh	r3, [r5, #12]
 80020e2:	065b      	lsls	r3, r3, #25
 80020e4:	f53f af12 	bmi.w	8001f0c <_vfiprintf_r+0x4c>
 80020e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020ea:	e711      	b.n	8001f10 <_vfiprintf_r+0x50>
 80020ec:	ab03      	add	r3, sp, #12
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	462a      	mov	r2, r5
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <_vfiprintf_r+0x25c>)
 80020f4:	a904      	add	r1, sp, #16
 80020f6:	4630      	mov	r0, r6
 80020f8:	f000 f880 	bl	80021fc <_printf_i>
 80020fc:	e7e4      	b.n	80020c8 <_vfiprintf_r+0x208>
 80020fe:	bf00      	nop
 8002100:	08002ca8 	.word	0x08002ca8
 8002104:	08002cc8 	.word	0x08002cc8
 8002108:	08002c88 	.word	0x08002c88
 800210c:	08002ce8 	.word	0x08002ce8
 8002110:	08002cee 	.word	0x08002cee
 8002114:	08002cf2 	.word	0x08002cf2
 8002118:	00000000 	.word	0x00000000
 800211c:	08001e9b 	.word	0x08001e9b

08002120 <_printf_common>:
 8002120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002124:	4616      	mov	r6, r2
 8002126:	4699      	mov	r9, r3
 8002128:	688a      	ldr	r2, [r1, #8]
 800212a:	690b      	ldr	r3, [r1, #16]
 800212c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002130:	4293      	cmp	r3, r2
 8002132:	bfb8      	it	lt
 8002134:	4613      	movlt	r3, r2
 8002136:	6033      	str	r3, [r6, #0]
 8002138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800213c:	4607      	mov	r7, r0
 800213e:	460c      	mov	r4, r1
 8002140:	b10a      	cbz	r2, 8002146 <_printf_common+0x26>
 8002142:	3301      	adds	r3, #1
 8002144:	6033      	str	r3, [r6, #0]
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	0699      	lsls	r1, r3, #26
 800214a:	bf42      	ittt	mi
 800214c:	6833      	ldrmi	r3, [r6, #0]
 800214e:	3302      	addmi	r3, #2
 8002150:	6033      	strmi	r3, [r6, #0]
 8002152:	6825      	ldr	r5, [r4, #0]
 8002154:	f015 0506 	ands.w	r5, r5, #6
 8002158:	d106      	bne.n	8002168 <_printf_common+0x48>
 800215a:	f104 0a19 	add.w	sl, r4, #25
 800215e:	68e3      	ldr	r3, [r4, #12]
 8002160:	6832      	ldr	r2, [r6, #0]
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	42ab      	cmp	r3, r5
 8002166:	dc26      	bgt.n	80021b6 <_printf_common+0x96>
 8002168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800216c:	1e13      	subs	r3, r2, #0
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	bf18      	it	ne
 8002172:	2301      	movne	r3, #1
 8002174:	0692      	lsls	r2, r2, #26
 8002176:	d42b      	bmi.n	80021d0 <_printf_common+0xb0>
 8002178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800217c:	4649      	mov	r1, r9
 800217e:	4638      	mov	r0, r7
 8002180:	47c0      	blx	r8
 8002182:	3001      	adds	r0, #1
 8002184:	d01e      	beq.n	80021c4 <_printf_common+0xa4>
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	68e5      	ldr	r5, [r4, #12]
 800218a:	6832      	ldr	r2, [r6, #0]
 800218c:	f003 0306 	and.w	r3, r3, #6
 8002190:	2b04      	cmp	r3, #4
 8002192:	bf08      	it	eq
 8002194:	1aad      	subeq	r5, r5, r2
 8002196:	68a3      	ldr	r3, [r4, #8]
 8002198:	6922      	ldr	r2, [r4, #16]
 800219a:	bf0c      	ite	eq
 800219c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021a0:	2500      	movne	r5, #0
 80021a2:	4293      	cmp	r3, r2
 80021a4:	bfc4      	itt	gt
 80021a6:	1a9b      	subgt	r3, r3, r2
 80021a8:	18ed      	addgt	r5, r5, r3
 80021aa:	2600      	movs	r6, #0
 80021ac:	341a      	adds	r4, #26
 80021ae:	42b5      	cmp	r5, r6
 80021b0:	d11a      	bne.n	80021e8 <_printf_common+0xc8>
 80021b2:	2000      	movs	r0, #0
 80021b4:	e008      	b.n	80021c8 <_printf_common+0xa8>
 80021b6:	2301      	movs	r3, #1
 80021b8:	4652      	mov	r2, sl
 80021ba:	4649      	mov	r1, r9
 80021bc:	4638      	mov	r0, r7
 80021be:	47c0      	blx	r8
 80021c0:	3001      	adds	r0, #1
 80021c2:	d103      	bne.n	80021cc <_printf_common+0xac>
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021cc:	3501      	adds	r5, #1
 80021ce:	e7c6      	b.n	800215e <_printf_common+0x3e>
 80021d0:	18e1      	adds	r1, r4, r3
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	2030      	movs	r0, #48	; 0x30
 80021d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021da:	4422      	add	r2, r4
 80021dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021e4:	3302      	adds	r3, #2
 80021e6:	e7c7      	b.n	8002178 <_printf_common+0x58>
 80021e8:	2301      	movs	r3, #1
 80021ea:	4622      	mov	r2, r4
 80021ec:	4649      	mov	r1, r9
 80021ee:	4638      	mov	r0, r7
 80021f0:	47c0      	blx	r8
 80021f2:	3001      	adds	r0, #1
 80021f4:	d0e6      	beq.n	80021c4 <_printf_common+0xa4>
 80021f6:	3601      	adds	r6, #1
 80021f8:	e7d9      	b.n	80021ae <_printf_common+0x8e>
	...

080021fc <_printf_i>:
 80021fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002200:	7e0f      	ldrb	r7, [r1, #24]
 8002202:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002204:	2f78      	cmp	r7, #120	; 0x78
 8002206:	4691      	mov	r9, r2
 8002208:	4680      	mov	r8, r0
 800220a:	460c      	mov	r4, r1
 800220c:	469a      	mov	sl, r3
 800220e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002212:	d807      	bhi.n	8002224 <_printf_i+0x28>
 8002214:	2f62      	cmp	r7, #98	; 0x62
 8002216:	d80a      	bhi.n	800222e <_printf_i+0x32>
 8002218:	2f00      	cmp	r7, #0
 800221a:	f000 80d8 	beq.w	80023ce <_printf_i+0x1d2>
 800221e:	2f58      	cmp	r7, #88	; 0x58
 8002220:	f000 80a3 	beq.w	800236a <_printf_i+0x16e>
 8002224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800222c:	e03a      	b.n	80022a4 <_printf_i+0xa8>
 800222e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002232:	2b15      	cmp	r3, #21
 8002234:	d8f6      	bhi.n	8002224 <_printf_i+0x28>
 8002236:	a101      	add	r1, pc, #4	; (adr r1, 800223c <_printf_i+0x40>)
 8002238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800223c:	08002295 	.word	0x08002295
 8002240:	080022a9 	.word	0x080022a9
 8002244:	08002225 	.word	0x08002225
 8002248:	08002225 	.word	0x08002225
 800224c:	08002225 	.word	0x08002225
 8002250:	08002225 	.word	0x08002225
 8002254:	080022a9 	.word	0x080022a9
 8002258:	08002225 	.word	0x08002225
 800225c:	08002225 	.word	0x08002225
 8002260:	08002225 	.word	0x08002225
 8002264:	08002225 	.word	0x08002225
 8002268:	080023b5 	.word	0x080023b5
 800226c:	080022d9 	.word	0x080022d9
 8002270:	08002397 	.word	0x08002397
 8002274:	08002225 	.word	0x08002225
 8002278:	08002225 	.word	0x08002225
 800227c:	080023d7 	.word	0x080023d7
 8002280:	08002225 	.word	0x08002225
 8002284:	080022d9 	.word	0x080022d9
 8002288:	08002225 	.word	0x08002225
 800228c:	08002225 	.word	0x08002225
 8002290:	0800239f 	.word	0x0800239f
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	602a      	str	r2, [r5, #0]
 800229c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0a3      	b.n	80023f0 <_printf_i+0x1f4>
 80022a8:	6820      	ldr	r0, [r4, #0]
 80022aa:	6829      	ldr	r1, [r5, #0]
 80022ac:	0606      	lsls	r6, r0, #24
 80022ae:	f101 0304 	add.w	r3, r1, #4
 80022b2:	d50a      	bpl.n	80022ca <_printf_i+0xce>
 80022b4:	680e      	ldr	r6, [r1, #0]
 80022b6:	602b      	str	r3, [r5, #0]
 80022b8:	2e00      	cmp	r6, #0
 80022ba:	da03      	bge.n	80022c4 <_printf_i+0xc8>
 80022bc:	232d      	movs	r3, #45	; 0x2d
 80022be:	4276      	negs	r6, r6
 80022c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022c4:	485e      	ldr	r0, [pc, #376]	; (8002440 <_printf_i+0x244>)
 80022c6:	230a      	movs	r3, #10
 80022c8:	e019      	b.n	80022fe <_printf_i+0x102>
 80022ca:	680e      	ldr	r6, [r1, #0]
 80022cc:	602b      	str	r3, [r5, #0]
 80022ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022d2:	bf18      	it	ne
 80022d4:	b236      	sxthne	r6, r6
 80022d6:	e7ef      	b.n	80022b8 <_printf_i+0xbc>
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	1d19      	adds	r1, r3, #4
 80022de:	6029      	str	r1, [r5, #0]
 80022e0:	0601      	lsls	r1, r0, #24
 80022e2:	d501      	bpl.n	80022e8 <_printf_i+0xec>
 80022e4:	681e      	ldr	r6, [r3, #0]
 80022e6:	e002      	b.n	80022ee <_printf_i+0xf2>
 80022e8:	0646      	lsls	r6, r0, #25
 80022ea:	d5fb      	bpl.n	80022e4 <_printf_i+0xe8>
 80022ec:	881e      	ldrh	r6, [r3, #0]
 80022ee:	4854      	ldr	r0, [pc, #336]	; (8002440 <_printf_i+0x244>)
 80022f0:	2f6f      	cmp	r7, #111	; 0x6f
 80022f2:	bf0c      	ite	eq
 80022f4:	2308      	moveq	r3, #8
 80022f6:	230a      	movne	r3, #10
 80022f8:	2100      	movs	r1, #0
 80022fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022fe:	6865      	ldr	r5, [r4, #4]
 8002300:	60a5      	str	r5, [r4, #8]
 8002302:	2d00      	cmp	r5, #0
 8002304:	bfa2      	ittt	ge
 8002306:	6821      	ldrge	r1, [r4, #0]
 8002308:	f021 0104 	bicge.w	r1, r1, #4
 800230c:	6021      	strge	r1, [r4, #0]
 800230e:	b90e      	cbnz	r6, 8002314 <_printf_i+0x118>
 8002310:	2d00      	cmp	r5, #0
 8002312:	d04d      	beq.n	80023b0 <_printf_i+0x1b4>
 8002314:	4615      	mov	r5, r2
 8002316:	fbb6 f1f3 	udiv	r1, r6, r3
 800231a:	fb03 6711 	mls	r7, r3, r1, r6
 800231e:	5dc7      	ldrb	r7, [r0, r7]
 8002320:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002324:	4637      	mov	r7, r6
 8002326:	42bb      	cmp	r3, r7
 8002328:	460e      	mov	r6, r1
 800232a:	d9f4      	bls.n	8002316 <_printf_i+0x11a>
 800232c:	2b08      	cmp	r3, #8
 800232e:	d10b      	bne.n	8002348 <_printf_i+0x14c>
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	07de      	lsls	r6, r3, #31
 8002334:	d508      	bpl.n	8002348 <_printf_i+0x14c>
 8002336:	6923      	ldr	r3, [r4, #16]
 8002338:	6861      	ldr	r1, [r4, #4]
 800233a:	4299      	cmp	r1, r3
 800233c:	bfde      	ittt	le
 800233e:	2330      	movle	r3, #48	; 0x30
 8002340:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002344:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002348:	1b52      	subs	r2, r2, r5
 800234a:	6122      	str	r2, [r4, #16]
 800234c:	f8cd a000 	str.w	sl, [sp]
 8002350:	464b      	mov	r3, r9
 8002352:	aa03      	add	r2, sp, #12
 8002354:	4621      	mov	r1, r4
 8002356:	4640      	mov	r0, r8
 8002358:	f7ff fee2 	bl	8002120 <_printf_common>
 800235c:	3001      	adds	r0, #1
 800235e:	d14c      	bne.n	80023fa <_printf_i+0x1fe>
 8002360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002364:	b004      	add	sp, #16
 8002366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236a:	4835      	ldr	r0, [pc, #212]	; (8002440 <_printf_i+0x244>)
 800236c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002370:	6829      	ldr	r1, [r5, #0]
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	f851 6b04 	ldr.w	r6, [r1], #4
 8002378:	6029      	str	r1, [r5, #0]
 800237a:	061d      	lsls	r5, r3, #24
 800237c:	d514      	bpl.n	80023a8 <_printf_i+0x1ac>
 800237e:	07df      	lsls	r7, r3, #31
 8002380:	bf44      	itt	mi
 8002382:	f043 0320 	orrmi.w	r3, r3, #32
 8002386:	6023      	strmi	r3, [r4, #0]
 8002388:	b91e      	cbnz	r6, 8002392 <_printf_i+0x196>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	f023 0320 	bic.w	r3, r3, #32
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	2310      	movs	r3, #16
 8002394:	e7b0      	b.n	80022f8 <_printf_i+0xfc>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	f043 0320 	orr.w	r3, r3, #32
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	2378      	movs	r3, #120	; 0x78
 80023a0:	4828      	ldr	r0, [pc, #160]	; (8002444 <_printf_i+0x248>)
 80023a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023a6:	e7e3      	b.n	8002370 <_printf_i+0x174>
 80023a8:	0659      	lsls	r1, r3, #25
 80023aa:	bf48      	it	mi
 80023ac:	b2b6      	uxthmi	r6, r6
 80023ae:	e7e6      	b.n	800237e <_printf_i+0x182>
 80023b0:	4615      	mov	r5, r2
 80023b2:	e7bb      	b.n	800232c <_printf_i+0x130>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	6826      	ldr	r6, [r4, #0]
 80023b8:	6961      	ldr	r1, [r4, #20]
 80023ba:	1d18      	adds	r0, r3, #4
 80023bc:	6028      	str	r0, [r5, #0]
 80023be:	0635      	lsls	r5, r6, #24
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	d501      	bpl.n	80023c8 <_printf_i+0x1cc>
 80023c4:	6019      	str	r1, [r3, #0]
 80023c6:	e002      	b.n	80023ce <_printf_i+0x1d2>
 80023c8:	0670      	lsls	r0, r6, #25
 80023ca:	d5fb      	bpl.n	80023c4 <_printf_i+0x1c8>
 80023cc:	8019      	strh	r1, [r3, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	6123      	str	r3, [r4, #16]
 80023d2:	4615      	mov	r5, r2
 80023d4:	e7ba      	b.n	800234c <_printf_i+0x150>
 80023d6:	682b      	ldr	r3, [r5, #0]
 80023d8:	1d1a      	adds	r2, r3, #4
 80023da:	602a      	str	r2, [r5, #0]
 80023dc:	681d      	ldr	r5, [r3, #0]
 80023de:	6862      	ldr	r2, [r4, #4]
 80023e0:	2100      	movs	r1, #0
 80023e2:	4628      	mov	r0, r5
 80023e4:	f7fd ff04 	bl	80001f0 <memchr>
 80023e8:	b108      	cbz	r0, 80023ee <_printf_i+0x1f2>
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	6060      	str	r0, [r4, #4]
 80023ee:	6863      	ldr	r3, [r4, #4]
 80023f0:	6123      	str	r3, [r4, #16]
 80023f2:	2300      	movs	r3, #0
 80023f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f8:	e7a8      	b.n	800234c <_printf_i+0x150>
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	462a      	mov	r2, r5
 80023fe:	4649      	mov	r1, r9
 8002400:	4640      	mov	r0, r8
 8002402:	47d0      	blx	sl
 8002404:	3001      	adds	r0, #1
 8002406:	d0ab      	beq.n	8002360 <_printf_i+0x164>
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	079b      	lsls	r3, r3, #30
 800240c:	d413      	bmi.n	8002436 <_printf_i+0x23a>
 800240e:	68e0      	ldr	r0, [r4, #12]
 8002410:	9b03      	ldr	r3, [sp, #12]
 8002412:	4298      	cmp	r0, r3
 8002414:	bfb8      	it	lt
 8002416:	4618      	movlt	r0, r3
 8002418:	e7a4      	b.n	8002364 <_printf_i+0x168>
 800241a:	2301      	movs	r3, #1
 800241c:	4632      	mov	r2, r6
 800241e:	4649      	mov	r1, r9
 8002420:	4640      	mov	r0, r8
 8002422:	47d0      	blx	sl
 8002424:	3001      	adds	r0, #1
 8002426:	d09b      	beq.n	8002360 <_printf_i+0x164>
 8002428:	3501      	adds	r5, #1
 800242a:	68e3      	ldr	r3, [r4, #12]
 800242c:	9903      	ldr	r1, [sp, #12]
 800242e:	1a5b      	subs	r3, r3, r1
 8002430:	42ab      	cmp	r3, r5
 8002432:	dcf2      	bgt.n	800241a <_printf_i+0x21e>
 8002434:	e7eb      	b.n	800240e <_printf_i+0x212>
 8002436:	2500      	movs	r5, #0
 8002438:	f104 0619 	add.w	r6, r4, #25
 800243c:	e7f5      	b.n	800242a <_printf_i+0x22e>
 800243e:	bf00      	nop
 8002440:	08002cf9 	.word	0x08002cf9
 8002444:	08002d0a 	.word	0x08002d0a

08002448 <_sbrk_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	4d06      	ldr	r5, [pc, #24]	; (8002464 <_sbrk_r+0x1c>)
 800244c:	2300      	movs	r3, #0
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	602b      	str	r3, [r5, #0]
 8002454:	f000 f9b8 	bl	80027c8 <_sbrk>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d102      	bne.n	8002462 <_sbrk_r+0x1a>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	b103      	cbz	r3, 8002462 <_sbrk_r+0x1a>
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	200000ec 	.word	0x200000ec

08002468 <__sread>:
 8002468:	b510      	push	{r4, lr}
 800246a:	460c      	mov	r4, r1
 800246c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002470:	f000 f8a0 	bl	80025b4 <_read_r>
 8002474:	2800      	cmp	r0, #0
 8002476:	bfab      	itete	ge
 8002478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800247a:	89a3      	ldrhlt	r3, [r4, #12]
 800247c:	181b      	addge	r3, r3, r0
 800247e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002482:	bfac      	ite	ge
 8002484:	6563      	strge	r3, [r4, #84]	; 0x54
 8002486:	81a3      	strhlt	r3, [r4, #12]
 8002488:	bd10      	pop	{r4, pc}

0800248a <__swrite>:
 800248a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800248e:	461f      	mov	r7, r3
 8002490:	898b      	ldrh	r3, [r1, #12]
 8002492:	05db      	lsls	r3, r3, #23
 8002494:	4605      	mov	r5, r0
 8002496:	460c      	mov	r4, r1
 8002498:	4616      	mov	r6, r2
 800249a:	d505      	bpl.n	80024a8 <__swrite+0x1e>
 800249c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a0:	2302      	movs	r3, #2
 80024a2:	2200      	movs	r2, #0
 80024a4:	f000 f868 	bl	8002578 <_lseek_r>
 80024a8:	89a3      	ldrh	r3, [r4, #12]
 80024aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b2:	81a3      	strh	r3, [r4, #12]
 80024b4:	4632      	mov	r2, r6
 80024b6:	463b      	mov	r3, r7
 80024b8:	4628      	mov	r0, r5
 80024ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024be:	f000 b817 	b.w	80024f0 <_write_r>

080024c2 <__sseek>:
 80024c2:	b510      	push	{r4, lr}
 80024c4:	460c      	mov	r4, r1
 80024c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ca:	f000 f855 	bl	8002578 <_lseek_r>
 80024ce:	1c43      	adds	r3, r0, #1
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	bf15      	itete	ne
 80024d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80024d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024de:	81a3      	strheq	r3, [r4, #12]
 80024e0:	bf18      	it	ne
 80024e2:	81a3      	strhne	r3, [r4, #12]
 80024e4:	bd10      	pop	{r4, pc}

080024e6 <__sclose>:
 80024e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ea:	f000 b813 	b.w	8002514 <_close_r>
	...

080024f0 <_write_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4d07      	ldr	r5, [pc, #28]	; (8002510 <_write_r+0x20>)
 80024f4:	4604      	mov	r4, r0
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	2200      	movs	r2, #0
 80024fc:	602a      	str	r2, [r5, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f000 f90f 	bl	8002722 <_write>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d102      	bne.n	800250e <_write_r+0x1e>
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	b103      	cbz	r3, 800250e <_write_r+0x1e>
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	200000ec 	.word	0x200000ec

08002514 <_close_r>:
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	4d06      	ldr	r5, [pc, #24]	; (8002530 <_close_r+0x1c>)
 8002518:	2300      	movs	r3, #0
 800251a:	4604      	mov	r4, r0
 800251c:	4608      	mov	r0, r1
 800251e:	602b      	str	r3, [r5, #0]
 8002520:	f000 f92c 	bl	800277c <_close>
 8002524:	1c43      	adds	r3, r0, #1
 8002526:	d102      	bne.n	800252e <_close_r+0x1a>
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	b103      	cbz	r3, 800252e <_close_r+0x1a>
 800252c:	6023      	str	r3, [r4, #0]
 800252e:	bd38      	pop	{r3, r4, r5, pc}
 8002530:	200000ec 	.word	0x200000ec

08002534 <_fstat_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4d07      	ldr	r5, [pc, #28]	; (8002554 <_fstat_r+0x20>)
 8002538:	2300      	movs	r3, #0
 800253a:	4604      	mov	r4, r0
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	602b      	str	r3, [r5, #0]
 8002542:	f000 f986 	bl	8002852 <_fstat>
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	d102      	bne.n	8002550 <_fstat_r+0x1c>
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	b103      	cbz	r3, 8002550 <_fstat_r+0x1c>
 800254e:	6023      	str	r3, [r4, #0]
 8002550:	bd38      	pop	{r3, r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	200000ec 	.word	0x200000ec

08002558 <_isatty_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4d06      	ldr	r5, [pc, #24]	; (8002574 <_isatty_r+0x1c>)
 800255c:	2300      	movs	r3, #0
 800255e:	4604      	mov	r4, r0
 8002560:	4608      	mov	r0, r1
 8002562:	602b      	str	r3, [r5, #0]
 8002564:	f000 fadc 	bl	8002b20 <_isatty>
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d102      	bne.n	8002572 <_isatty_r+0x1a>
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	b103      	cbz	r3, 8002572 <_isatty_r+0x1a>
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	bd38      	pop	{r3, r4, r5, pc}
 8002574:	200000ec 	.word	0x200000ec

08002578 <_lseek_r>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4d07      	ldr	r5, [pc, #28]	; (8002598 <_lseek_r+0x20>)
 800257c:	4604      	mov	r4, r0
 800257e:	4608      	mov	r0, r1
 8002580:	4611      	mov	r1, r2
 8002582:	2200      	movs	r2, #0
 8002584:	602a      	str	r2, [r5, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	f000 f8b9 	bl	80026fe <_lseek>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d102      	bne.n	8002596 <_lseek_r+0x1e>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	b103      	cbz	r3, 8002596 <_lseek_r+0x1e>
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	bd38      	pop	{r3, r4, r5, pc}
 8002598:	200000ec 	.word	0x200000ec

0800259c <__malloc_lock>:
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <__malloc_lock+0x8>)
 800259e:	f7ff bb21 	b.w	8001be4 <__retarget_lock_acquire_recursive>
 80025a2:	bf00      	nop
 80025a4:	200000e0 	.word	0x200000e0

080025a8 <__malloc_unlock>:
 80025a8:	4801      	ldr	r0, [pc, #4]	; (80025b0 <__malloc_unlock+0x8>)
 80025aa:	f7ff bb1c 	b.w	8001be6 <__retarget_lock_release_recursive>
 80025ae:	bf00      	nop
 80025b0:	200000e0 	.word	0x200000e0

080025b4 <_read_r>:
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	4d07      	ldr	r5, [pc, #28]	; (80025d4 <_read_r+0x20>)
 80025b8:	4604      	mov	r4, r0
 80025ba:	4608      	mov	r0, r1
 80025bc:	4611      	mov	r1, r2
 80025be:	2200      	movs	r2, #0
 80025c0:	602a      	str	r2, [r5, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f000 f845 	bl	8002652 <_read>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d102      	bne.n	80025d2 <_read_r+0x1e>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	b103      	cbz	r3, 80025d2 <_read_r+0x1e>
 80025d0:	6023      	str	r3, [r4, #0]
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	200000ec 	.word	0x200000ec

080025d8 <findslot>:
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <findslot+0x2c>)
 80025da:	b510      	push	{r4, lr}
 80025dc:	4604      	mov	r4, r0
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	b118      	cbz	r0, 80025ea <findslot+0x12>
 80025e2:	6983      	ldr	r3, [r0, #24]
 80025e4:	b90b      	cbnz	r3, 80025ea <findslot+0x12>
 80025e6:	f7ff fa5f 	bl	8001aa8 <__sinit>
 80025ea:	2c13      	cmp	r4, #19
 80025ec:	d807      	bhi.n	80025fe <findslot+0x26>
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <findslot+0x30>)
 80025f0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80025f4:	3201      	adds	r2, #1
 80025f6:	d002      	beq.n	80025fe <findslot+0x26>
 80025f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	2000      	movs	r0, #0
 8002600:	e7fc      	b.n	80025fc <findslot+0x24>
 8002602:	bf00      	nop
 8002604:	20000014 	.word	0x20000014
 8002608:	20000100 	.word	0x20000100

0800260c <error>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	4604      	mov	r4, r0
 8002610:	f000 faa2 	bl	8002b58 <__errno>
 8002614:	2613      	movs	r6, #19
 8002616:	4605      	mov	r5, r0
 8002618:	2700      	movs	r7, #0
 800261a:	4630      	mov	r0, r6
 800261c:	4639      	mov	r1, r7
 800261e:	beab      	bkpt	0x00ab
 8002620:	4606      	mov	r6, r0
 8002622:	602e      	str	r6, [r5, #0]
 8002624:	4620      	mov	r0, r4
 8002626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002628 <checkerror>:
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d101      	bne.n	8002630 <checkerror+0x8>
 800262c:	f7ff bfee 	b.w	800260c <error>
 8002630:	4770      	bx	lr

08002632 <_swiread>:
 8002632:	b530      	push	{r4, r5, lr}
 8002634:	b085      	sub	sp, #20
 8002636:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800263a:	9203      	str	r2, [sp, #12]
 800263c:	2406      	movs	r4, #6
 800263e:	ad01      	add	r5, sp, #4
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	beab      	bkpt	0x00ab
 8002646:	4604      	mov	r4, r0
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff ffed 	bl	8002628 <checkerror>
 800264e:	b005      	add	sp, #20
 8002650:	bd30      	pop	{r4, r5, pc}

08002652 <_read>:
 8002652:	b570      	push	{r4, r5, r6, lr}
 8002654:	460e      	mov	r6, r1
 8002656:	4615      	mov	r5, r2
 8002658:	f7ff ffbe 	bl	80025d8 <findslot>
 800265c:	4604      	mov	r4, r0
 800265e:	b930      	cbnz	r0, 800266e <_read+0x1c>
 8002660:	f000 fa7a 	bl	8002b58 <__errno>
 8002664:	2309      	movs	r3, #9
 8002666:	6003      	str	r3, [r0, #0]
 8002668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	6800      	ldr	r0, [r0, #0]
 8002670:	462a      	mov	r2, r5
 8002672:	4631      	mov	r1, r6
 8002674:	f7ff ffdd 	bl	8002632 <_swiread>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	bf1f      	itttt	ne
 800267c:	6863      	ldrne	r3, [r4, #4]
 800267e:	1a28      	subne	r0, r5, r0
 8002680:	181b      	addne	r3, r3, r0
 8002682:	6063      	strne	r3, [r4, #4]
 8002684:	e7f2      	b.n	800266c <_read+0x1a>

08002686 <_swilseek>:
 8002686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002688:	460c      	mov	r4, r1
 800268a:	4616      	mov	r6, r2
 800268c:	f7ff ffa4 	bl	80025d8 <findslot>
 8002690:	4605      	mov	r5, r0
 8002692:	b940      	cbnz	r0, 80026a6 <_swilseek+0x20>
 8002694:	f000 fa60 	bl	8002b58 <__errno>
 8002698:	2309      	movs	r3, #9
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026a0:	4620      	mov	r0, r4
 80026a2:	b003      	add	sp, #12
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a6:	2e02      	cmp	r6, #2
 80026a8:	d903      	bls.n	80026b2 <_swilseek+0x2c>
 80026aa:	f000 fa55 	bl	8002b58 <__errno>
 80026ae:	2316      	movs	r3, #22
 80026b0:	e7f3      	b.n	800269a <_swilseek+0x14>
 80026b2:	2e01      	cmp	r6, #1
 80026b4:	d112      	bne.n	80026dc <_swilseek+0x56>
 80026b6:	6843      	ldr	r3, [r0, #4]
 80026b8:	18e4      	adds	r4, r4, r3
 80026ba:	d4f6      	bmi.n	80026aa <_swilseek+0x24>
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	260a      	movs	r6, #10
 80026c0:	e9cd 3400 	strd	r3, r4, [sp]
 80026c4:	466f      	mov	r7, sp
 80026c6:	4630      	mov	r0, r6
 80026c8:	4639      	mov	r1, r7
 80026ca:	beab      	bkpt	0x00ab
 80026cc:	4606      	mov	r6, r0
 80026ce:	4630      	mov	r0, r6
 80026d0:	f7ff ffaa 	bl	8002628 <checkerror>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	dbe1      	blt.n	800269c <_swilseek+0x16>
 80026d8:	606c      	str	r4, [r5, #4]
 80026da:	e7e1      	b.n	80026a0 <_swilseek+0x1a>
 80026dc:	2e02      	cmp	r6, #2
 80026de:	d1ed      	bne.n	80026bc <_swilseek+0x36>
 80026e0:	6803      	ldr	r3, [r0, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	260c      	movs	r6, #12
 80026e6:	466f      	mov	r7, sp
 80026e8:	4630      	mov	r0, r6
 80026ea:	4639      	mov	r1, r7
 80026ec:	beab      	bkpt	0x00ab
 80026ee:	4606      	mov	r6, r0
 80026f0:	4630      	mov	r0, r6
 80026f2:	f7ff ff99 	bl	8002628 <checkerror>
 80026f6:	1c43      	adds	r3, r0, #1
 80026f8:	d0d0      	beq.n	800269c <_swilseek+0x16>
 80026fa:	4404      	add	r4, r0
 80026fc:	e7de      	b.n	80026bc <_swilseek+0x36>

080026fe <_lseek>:
 80026fe:	f7ff bfc2 	b.w	8002686 <_swilseek>

08002702 <_swiwrite>:
 8002702:	b530      	push	{r4, r5, lr}
 8002704:	b085      	sub	sp, #20
 8002706:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800270a:	9203      	str	r2, [sp, #12]
 800270c:	2405      	movs	r4, #5
 800270e:	ad01      	add	r5, sp, #4
 8002710:	4620      	mov	r0, r4
 8002712:	4629      	mov	r1, r5
 8002714:	beab      	bkpt	0x00ab
 8002716:	4604      	mov	r4, r0
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff ff85 	bl	8002628 <checkerror>
 800271e:	b005      	add	sp, #20
 8002720:	bd30      	pop	{r4, r5, pc}

08002722 <_write>:
 8002722:	b570      	push	{r4, r5, r6, lr}
 8002724:	460e      	mov	r6, r1
 8002726:	4615      	mov	r5, r2
 8002728:	f7ff ff56 	bl	80025d8 <findslot>
 800272c:	4604      	mov	r4, r0
 800272e:	b930      	cbnz	r0, 800273e <_write+0x1c>
 8002730:	f000 fa12 	bl	8002b58 <__errno>
 8002734:	2309      	movs	r3, #9
 8002736:	6003      	str	r3, [r0, #0]
 8002738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	6800      	ldr	r0, [r0, #0]
 8002740:	462a      	mov	r2, r5
 8002742:	4631      	mov	r1, r6
 8002744:	f7ff ffdd 	bl	8002702 <_swiwrite>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	dbf5      	blt.n	8002738 <_write+0x16>
 800274c:	6862      	ldr	r2, [r4, #4]
 800274e:	1ae8      	subs	r0, r5, r3
 8002750:	4402      	add	r2, r0
 8002752:	42ab      	cmp	r3, r5
 8002754:	6062      	str	r2, [r4, #4]
 8002756:	d1f1      	bne.n	800273c <_write+0x1a>
 8002758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800275c:	2000      	movs	r0, #0
 800275e:	f7ff bf55 	b.w	800260c <error>

08002762 <_swiclose>:
 8002762:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002764:	2402      	movs	r4, #2
 8002766:	9001      	str	r0, [sp, #4]
 8002768:	ad01      	add	r5, sp, #4
 800276a:	4620      	mov	r0, r4
 800276c:	4629      	mov	r1, r5
 800276e:	beab      	bkpt	0x00ab
 8002770:	4604      	mov	r4, r0
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff ff58 	bl	8002628 <checkerror>
 8002778:	b003      	add	sp, #12
 800277a:	bd30      	pop	{r4, r5, pc}

0800277c <_close>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4605      	mov	r5, r0
 8002780:	f7ff ff2a 	bl	80025d8 <findslot>
 8002784:	4604      	mov	r4, r0
 8002786:	b930      	cbnz	r0, 8002796 <_close+0x1a>
 8002788:	f000 f9e6 	bl	8002b58 <__errno>
 800278c:	2309      	movs	r3, #9
 800278e:	6003      	str	r3, [r0, #0]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002794:	bd38      	pop	{r3, r4, r5, pc}
 8002796:	3d01      	subs	r5, #1
 8002798:	2d01      	cmp	r5, #1
 800279a:	d809      	bhi.n	80027b0 <_close+0x34>
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <_close+0x48>)
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d104      	bne.n	80027b0 <_close+0x34>
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027aa:	6003      	str	r3, [r0, #0]
 80027ac:	2000      	movs	r0, #0
 80027ae:	e7f1      	b.n	8002794 <_close+0x18>
 80027b0:	6820      	ldr	r0, [r4, #0]
 80027b2:	f7ff ffd6 	bl	8002762 <_swiclose>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d1ec      	bne.n	8002794 <_close+0x18>
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027be:	6023      	str	r3, [r4, #0]
 80027c0:	e7e8      	b.n	8002794 <_close+0x18>
 80027c2:	bf00      	nop
 80027c4:	20000100 	.word	0x20000100

080027c8 <_sbrk>:
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <_sbrk+0x38>)
 80027ca:	6811      	ldr	r1, [r2, #0]
 80027cc:	b510      	push	{r4, lr}
 80027ce:	4603      	mov	r3, r0
 80027d0:	b909      	cbnz	r1, 80027d6 <_sbrk+0xe>
 80027d2:	490c      	ldr	r1, [pc, #48]	; (8002804 <_sbrk+0x3c>)
 80027d4:	6011      	str	r1, [r2, #0]
 80027d6:	6810      	ldr	r0, [r2, #0]
 80027d8:	4669      	mov	r1, sp
 80027da:	4403      	add	r3, r0
 80027dc:	428b      	cmp	r3, r1
 80027de:	d806      	bhi.n	80027ee <_sbrk+0x26>
 80027e0:	4909      	ldr	r1, [pc, #36]	; (8002808 <_sbrk+0x40>)
 80027e2:	4c0a      	ldr	r4, [pc, #40]	; (800280c <_sbrk+0x44>)
 80027e4:	6809      	ldr	r1, [r1, #0]
 80027e6:	42a1      	cmp	r1, r4
 80027e8:	d008      	beq.n	80027fc <_sbrk+0x34>
 80027ea:	428b      	cmp	r3, r1
 80027ec:	d906      	bls.n	80027fc <_sbrk+0x34>
 80027ee:	f000 f9b3 	bl	8002b58 <__errno>
 80027f2:	230c      	movs	r3, #12
 80027f4:	6003      	str	r3, [r0, #0]
 80027f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fa:	bd10      	pop	{r4, pc}
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e7fc      	b.n	80027fa <_sbrk+0x32>
 8002800:	200000f0 	.word	0x200000f0
 8002804:	200001a0 	.word	0x200001a0
 8002808:	20000078 	.word	0x20000078
 800280c:	cafedead 	.word	0xcafedead

08002810 <_swistat>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	460c      	mov	r4, r1
 8002814:	f7ff fee0 	bl	80025d8 <findslot>
 8002818:	4605      	mov	r5, r0
 800281a:	b930      	cbnz	r0, 800282a <_swistat+0x1a>
 800281c:	f000 f99c 	bl	8002b58 <__errno>
 8002820:	2309      	movs	r3, #9
 8002822:	6003      	str	r3, [r0, #0]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002828:	bd70      	pop	{r4, r5, r6, pc}
 800282a:	6863      	ldr	r3, [r4, #4]
 800282c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002830:	6063      	str	r3, [r4, #4]
 8002832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002836:	64a3      	str	r3, [r4, #72]	; 0x48
 8002838:	260c      	movs	r6, #12
 800283a:	4630      	mov	r0, r6
 800283c:	4629      	mov	r1, r5
 800283e:	beab      	bkpt	0x00ab
 8002840:	4605      	mov	r5, r0
 8002842:	4628      	mov	r0, r5
 8002844:	f7ff fef0 	bl	8002628 <checkerror>
 8002848:	1c43      	adds	r3, r0, #1
 800284a:	bf1c      	itt	ne
 800284c:	6120      	strne	r0, [r4, #16]
 800284e:	2000      	movne	r0, #0
 8002850:	e7ea      	b.n	8002828 <_swistat+0x18>

08002852 <_fstat>:
 8002852:	460b      	mov	r3, r1
 8002854:	b510      	push	{r4, lr}
 8002856:	2100      	movs	r1, #0
 8002858:	4604      	mov	r4, r0
 800285a:	2258      	movs	r2, #88	; 0x58
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe feb7 	bl	80015d0 <memset>
 8002862:	4601      	mov	r1, r0
 8002864:	4620      	mov	r0, r4
 8002866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800286a:	f7ff bfd1 	b.w	8002810 <_swistat>

0800286e <_stat>:
 800286e:	b538      	push	{r3, r4, r5, lr}
 8002870:	460d      	mov	r5, r1
 8002872:	4604      	mov	r4, r0
 8002874:	2258      	movs	r2, #88	; 0x58
 8002876:	2100      	movs	r1, #0
 8002878:	4628      	mov	r0, r5
 800287a:	f7fe fea9 	bl	80015d0 <memset>
 800287e:	4620      	mov	r0, r4
 8002880:	2100      	movs	r1, #0
 8002882:	f000 f811 	bl	80028a8 <_swiopen>
 8002886:	1c43      	adds	r3, r0, #1
 8002888:	4604      	mov	r4, r0
 800288a:	d00b      	beq.n	80028a4 <_stat+0x36>
 800288c:	686b      	ldr	r3, [r5, #4]
 800288e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002892:	606b      	str	r3, [r5, #4]
 8002894:	4629      	mov	r1, r5
 8002896:	f7ff ffbb 	bl	8002810 <_swistat>
 800289a:	4605      	mov	r5, r0
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff ff6d 	bl	800277c <_close>
 80028a2:	462c      	mov	r4, r5
 80028a4:	4620      	mov	r0, r4
 80028a6:	bd38      	pop	{r3, r4, r5, pc}

080028a8 <_swiopen>:
 80028a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028ac:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002958 <_swiopen+0xb0>
 80028b0:	b097      	sub	sp, #92	; 0x5c
 80028b2:	4607      	mov	r7, r0
 80028b4:	460e      	mov	r6, r1
 80028b6:	2500      	movs	r5, #0
 80028b8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80028bc:	1c61      	adds	r1, r4, #1
 80028be:	d037      	beq.n	8002930 <_swiopen+0x88>
 80028c0:	3501      	adds	r5, #1
 80028c2:	2d14      	cmp	r5, #20
 80028c4:	d1f8      	bne.n	80028b8 <_swiopen+0x10>
 80028c6:	f000 f947 	bl	8002b58 <__errno>
 80028ca:	2318      	movs	r3, #24
 80028cc:	6003      	str	r3, [r0, #0]
 80028ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80028d2:	e03d      	b.n	8002950 <_swiopen+0xa8>
 80028d4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80028d8:	f240 6301 	movw	r3, #1537	; 0x601
 80028dc:	07b2      	lsls	r2, r6, #30
 80028de:	bf48      	it	mi
 80028e0:	f044 0402 	orrmi.w	r4, r4, #2
 80028e4:	421e      	tst	r6, r3
 80028e6:	bf18      	it	ne
 80028e8:	f044 0404 	orrne.w	r4, r4, #4
 80028ec:	0733      	lsls	r3, r6, #28
 80028ee:	bf48      	it	mi
 80028f0:	f024 0404 	bicmi.w	r4, r4, #4
 80028f4:	4638      	mov	r0, r7
 80028f6:	bf48      	it	mi
 80028f8:	f044 0408 	orrmi.w	r4, r4, #8
 80028fc:	9700      	str	r7, [sp, #0]
 80028fe:	f7fd fcc7 	bl	8000290 <strlen>
 8002902:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002906:	2401      	movs	r4, #1
 8002908:	4620      	mov	r0, r4
 800290a:	4649      	mov	r1, r9
 800290c:	beab      	bkpt	0x00ab
 800290e:	4604      	mov	r4, r0
 8002910:	2c00      	cmp	r4, #0
 8002912:	db08      	blt.n	8002926 <_swiopen+0x7e>
 8002914:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002918:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800291c:	2300      	movs	r3, #0
 800291e:	f8c8 3004 	str.w	r3, [r8, #4]
 8002922:	462c      	mov	r4, r5
 8002924:	e014      	b.n	8002950 <_swiopen+0xa8>
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe70 	bl	800260c <error>
 800292c:	4604      	mov	r4, r0
 800292e:	e00f      	b.n	8002950 <_swiopen+0xa8>
 8002930:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002934:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002938:	46e9      	mov	r9, sp
 800293a:	d1cb      	bne.n	80028d4 <_swiopen+0x2c>
 800293c:	4649      	mov	r1, r9
 800293e:	4638      	mov	r0, r7
 8002940:	f7ff ff95 	bl	800286e <_stat>
 8002944:	3001      	adds	r0, #1
 8002946:	d0c5      	beq.n	80028d4 <_swiopen+0x2c>
 8002948:	f000 f906 	bl	8002b58 <__errno>
 800294c:	2311      	movs	r3, #17
 800294e:	6003      	str	r3, [r0, #0]
 8002950:	4620      	mov	r0, r4
 8002952:	b017      	add	sp, #92	; 0x5c
 8002954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002958:	20000100 	.word	0x20000100

0800295c <_get_semihosting_exts>:
 800295c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002960:	4606      	mov	r6, r0
 8002962:	460f      	mov	r7, r1
 8002964:	482a      	ldr	r0, [pc, #168]	; (8002a10 <_get_semihosting_exts+0xb4>)
 8002966:	2100      	movs	r1, #0
 8002968:	4615      	mov	r5, r2
 800296a:	f7ff ff9d 	bl	80028a8 <_swiopen>
 800296e:	462a      	mov	r2, r5
 8002970:	4604      	mov	r4, r0
 8002972:	2100      	movs	r1, #0
 8002974:	4630      	mov	r0, r6
 8002976:	f7fe fe2b 	bl	80015d0 <memset>
 800297a:	1c63      	adds	r3, r4, #1
 800297c:	d016      	beq.n	80029ac <_get_semihosting_exts+0x50>
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff fe2a 	bl	80025d8 <findslot>
 8002984:	f04f 080c 	mov.w	r8, #12
 8002988:	4681      	mov	r9, r0
 800298a:	4640      	mov	r0, r8
 800298c:	4649      	mov	r1, r9
 800298e:	beab      	bkpt	0x00ab
 8002990:	4680      	mov	r8, r0
 8002992:	4640      	mov	r0, r8
 8002994:	f7ff fe48 	bl	8002628 <checkerror>
 8002998:	2803      	cmp	r0, #3
 800299a:	dd02      	ble.n	80029a2 <_get_semihosting_exts+0x46>
 800299c:	1ec3      	subs	r3, r0, #3
 800299e:	42ab      	cmp	r3, r5
 80029a0:	dc08      	bgt.n	80029b4 <_get_semihosting_exts+0x58>
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff feea 	bl	800277c <_close>
 80029a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80029ac:	4620      	mov	r0, r4
 80029ae:	b003      	add	sp, #12
 80029b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029b4:	2204      	movs	r2, #4
 80029b6:	eb0d 0102 	add.w	r1, sp, r2
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7ff fe49 	bl	8002652 <_read>
 80029c0:	2803      	cmp	r0, #3
 80029c2:	ddee      	ble.n	80029a2 <_get_semihosting_exts+0x46>
 80029c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029c8:	2b53      	cmp	r3, #83	; 0x53
 80029ca:	d1ea      	bne.n	80029a2 <_get_semihosting_exts+0x46>
 80029cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029d0:	2b48      	cmp	r3, #72	; 0x48
 80029d2:	d1e6      	bne.n	80029a2 <_get_semihosting_exts+0x46>
 80029d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80029d8:	2b46      	cmp	r3, #70	; 0x46
 80029da:	d1e2      	bne.n	80029a2 <_get_semihosting_exts+0x46>
 80029dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80029e0:	2b42      	cmp	r3, #66	; 0x42
 80029e2:	d1de      	bne.n	80029a2 <_get_semihosting_exts+0x46>
 80029e4:	2201      	movs	r2, #1
 80029e6:	4639      	mov	r1, r7
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7ff fe4c 	bl	8002686 <_swilseek>
 80029ee:	2800      	cmp	r0, #0
 80029f0:	dbd7      	blt.n	80029a2 <_get_semihosting_exts+0x46>
 80029f2:	462a      	mov	r2, r5
 80029f4:	4631      	mov	r1, r6
 80029f6:	4620      	mov	r0, r4
 80029f8:	f7ff fe2b 	bl	8002652 <_read>
 80029fc:	4605      	mov	r5, r0
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff febc 	bl	800277c <_close>
 8002a04:	4628      	mov	r0, r5
 8002a06:	f7ff fe0f 	bl	8002628 <checkerror>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	e7ce      	b.n	80029ac <_get_semihosting_exts+0x50>
 8002a0e:	bf00      	nop
 8002a10:	08002d1b 	.word	0x08002d1b

08002a14 <initialise_semihosting_exts>:
 8002a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a16:	4d0a      	ldr	r5, [pc, #40]	; (8002a40 <initialise_semihosting_exts+0x2c>)
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <initialise_semihosting_exts+0x30>)
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	a801      	add	r0, sp, #4
 8002a20:	6029      	str	r1, [r5, #0]
 8002a22:	6022      	str	r2, [r4, #0]
 8002a24:	f7ff ff9a 	bl	800295c <_get_semihosting_exts>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	dd07      	ble.n	8002a3c <initialise_semihosting_exts+0x28>
 8002a2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a30:	f003 0201 	and.w	r2, r3, #1
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	602a      	str	r2, [r5, #0]
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	b003      	add	sp, #12
 8002a3e:	bd30      	pop	{r4, r5, pc}
 8002a40:	2000007c 	.word	0x2000007c
 8002a44:	20000080 	.word	0x20000080

08002a48 <_has_ext_stdout_stderr>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4c04      	ldr	r4, [pc, #16]	; (8002a5c <_has_ext_stdout_stderr+0x14>)
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da01      	bge.n	8002a56 <_has_ext_stdout_stderr+0xe>
 8002a52:	f7ff ffdf 	bl	8002a14 <initialise_semihosting_exts>
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	bd10      	pop	{r4, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000080 	.word	0x20000080

08002a60 <initialise_monitor_handles>:
 8002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	b085      	sub	sp, #20
 8002a66:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002b0c <initialise_monitor_handles+0xac>
 8002a6a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a6e:	2303      	movs	r3, #3
 8002a70:	2400      	movs	r4, #0
 8002a72:	9303      	str	r3, [sp, #12]
 8002a74:	af01      	add	r7, sp, #4
 8002a76:	9402      	str	r4, [sp, #8]
 8002a78:	2501      	movs	r5, #1
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	4639      	mov	r1, r7
 8002a7e:	beab      	bkpt	0x00ab
 8002a80:	4605      	mov	r5, r0
 8002a82:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002b10 <initialise_monitor_handles+0xb0>
 8002a86:	4623      	mov	r3, r4
 8002a88:	4c22      	ldr	r4, [pc, #136]	; (8002b14 <initialise_monitor_handles+0xb4>)
 8002a8a:	f8c8 5000 	str.w	r5, [r8]
 8002a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a92:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002a96:	3301      	adds	r3, #1
 8002a98:	2b14      	cmp	r3, #20
 8002a9a:	d1fa      	bne.n	8002a92 <initialise_monitor_handles+0x32>
 8002a9c:	f7ff ffd4 	bl	8002a48 <_has_ext_stdout_stderr>
 8002aa0:	4d1d      	ldr	r5, [pc, #116]	; (8002b18 <initialise_monitor_handles+0xb8>)
 8002aa2:	b1d0      	cbz	r0, 8002ada <initialise_monitor_handles+0x7a>
 8002aa4:	f04f 0a03 	mov.w	sl, #3
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	f8cd 9004 	str.w	r9, [sp, #4]
 8002aae:	2601      	movs	r6, #1
 8002ab0:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	4639      	mov	r1, r7
 8002aba:	beab      	bkpt	0x00ab
 8002abc:	4683      	mov	fp, r0
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <initialise_monitor_handles+0xbc>)
 8002ac0:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ac4:	f8c3 b000 	str.w	fp, [r3]
 8002ac8:	2308      	movs	r3, #8
 8002aca:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	4639      	mov	r1, r7
 8002ad4:	beab      	bkpt	0x00ab
 8002ad6:	4606      	mov	r6, r0
 8002ad8:	602e      	str	r6, [r5, #0]
 8002ada:	682b      	ldr	r3, [r5, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	bf02      	ittt	eq
 8002ae0:	4b0e      	ldreq	r3, [pc, #56]	; (8002b1c <initialise_monitor_handles+0xbc>)
 8002ae2:	681b      	ldreq	r3, [r3, #0]
 8002ae4:	602b      	streq	r3, [r5, #0]
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	6066      	str	r6, [r4, #4]
 8002af0:	f7ff ffaa 	bl	8002a48 <_has_ext_stdout_stderr>
 8002af4:	b130      	cbz	r0, 8002b04 <initialise_monitor_handles+0xa4>
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <initialise_monitor_handles+0xbc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002afe:	682b      	ldr	r3, [r5, #0]
 8002b00:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002b04:	b005      	add	sp, #20
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08002d31 	.word	0x08002d31
 8002b10:	200000f8 	.word	0x200000f8
 8002b14:	20000100 	.word	0x20000100
 8002b18:	200000f4 	.word	0x200000f4
 8002b1c:	200000fc 	.word	0x200000fc

08002b20 <_isatty>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	f7ff fd59 	bl	80025d8 <findslot>
 8002b26:	2509      	movs	r5, #9
 8002b28:	4604      	mov	r4, r0
 8002b2a:	b920      	cbnz	r0, 8002b36 <_isatty+0x16>
 8002b2c:	f000 f814 	bl	8002b58 <__errno>
 8002b30:	6005      	str	r5, [r0, #0]
 8002b32:	4620      	mov	r0, r4
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	4628      	mov	r0, r5
 8002b38:	4621      	mov	r1, r4
 8002b3a:	beab      	bkpt	0x00ab
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	2c01      	cmp	r4, #1
 8002b40:	d0f7      	beq.n	8002b32 <_isatty+0x12>
 8002b42:	f000 f809 	bl	8002b58 <__errno>
 8002b46:	2400      	movs	r4, #0
 8002b48:	4605      	mov	r5, r0
 8002b4a:	2613      	movs	r6, #19
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	4621      	mov	r1, r4
 8002b50:	beab      	bkpt	0x00ab
 8002b52:	4606      	mov	r6, r0
 8002b54:	602e      	str	r6, [r5, #0]
 8002b56:	e7ec      	b.n	8002b32 <_isatty+0x12>

08002b58 <__errno>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <__errno+0x8>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000014 	.word	0x20000014

08002b64 <_init>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr

08002b70 <_fini>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	bf00      	nop
 8002b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b76:	bc08      	pop	{r3}
 8002b78:	469e      	mov	lr, r3
 8002b7a:	4770      	bx	lr
